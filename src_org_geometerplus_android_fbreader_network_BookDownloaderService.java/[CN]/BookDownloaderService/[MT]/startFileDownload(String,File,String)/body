{
synchronized (myDownloadsPermissions) {
    myDownloadsPermissions.put(urlString,Boolean.valueOf(true));
  }
  final int notificationId=(int)System.currentTimeMillis();
  final Notification progressNotification=createDownloadProgressNotification(title,urlString);
  final NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  notificationManager.notify(notificationId,progressNotification);
  final Handler progressHandler=new Handler(){
    public void handleMessage(    Message message){
      final int progress=message.what;
      final RemoteViews contentView=(RemoteViews)progressNotification.contentView;
      if (progress < 0) {
        contentView.setTextViewText(R.id.download_notification_progress_text,"");
        contentView.setProgressBar(R.id.download_notification_progress_bar,100,0,true);
      }
 else {
        contentView.setTextViewText(R.id.download_notification_progress_text,"" + progress + "%");
        contentView.setProgressBar(R.id.download_notification_progress_bar,100,progress,false);
      }
      final NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
      notificationManager.notify(notificationId,progressNotification);
    }
  }
;
  final Handler downloadFinishHandler=new Handler(){
    public void handleMessage(    Message message){
synchronized (myDownloadsPermissions) {
        myDownloadsPermissions.remove(urlString);
      }
      boolean success=false;
      boolean cancel=false;
switch (message.what) {
case DOWNLOAD_SUCCESS:
        success=true;
      break;
case DOWNLOAD_CANCEL:
    cancel=true;
  break;
case DOWNLOAD_FAILURE:
break;
}
final NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
notificationManager.cancel(notificationId);
if (!cancel) {
notificationManager.notify(notificationId,createDownloadFinishNotification(file,title,success));
}
doStop();
}
}
;
new Thread(new Runnable(){
public void run(){
final int updateIntervalMillis=1000;
boolean downloadSuccess=false;
boolean downloadCanceled=false;
try {
final URL url=new URL(urlString);
final URLConnection connection=url.openConnection();
if (!(connection instanceof HttpURLConnection)) {
return;
}
final HttpURLConnection httpConnection=(HttpURLConnection)connection;
httpConnection.setConnectTimeout(15000);
httpConnection.setReadTimeout(30000);
httpConnection.setRequestProperty("Connection","Close");
httpConnection.setRequestProperty("User-Agent",ZLNetworkUtil.getUserAgent());
final int response=httpConnection.getResponseCode();
if (response == HttpURLConnection.HTTP_OK) {
final int fileLength=httpConnection.getContentLength();
int downloadedPart=0;
long progressTime=System.currentTimeMillis() + updateIntervalMillis;
if (fileLength <= 0) {
  progressHandler.sendEmptyMessage(-1);
}
OutputStream outStream=new FileOutputStream(file);
try {
  InputStream inStream=httpConnection.getInputStream();
  final byte[] buffer=new byte[8192];
  while (true) {
synchronized (myDownloadsPermissions) {
      Boolean b=myDownloadsPermissions.get(urlString);
      if (b != null) {
        downloadCanceled=!b.booleanValue();
      }
    }
    if (downloadCanceled) {
      break;
    }
    final int size=inStream.read(buffer);
    if (size <= 0) {
      break;
    }
    downloadedPart+=size;
    if (fileLength > 0) {
      final long currentTime=System.currentTimeMillis();
      if (currentTime > progressTime) {
        progressTime=currentTime + updateIntervalMillis;
        progressHandler.sendEmptyMessage(downloadedPart * 100 / fileLength);
      }
    }
    outStream.write(buffer,0,size);
  }
  inStream.close();
}
  finally {
  outStream.close();
}
downloadSuccess=!downloadCanceled;
}
}
 catch (MalformedURLException e) {
}
catch (SocketTimeoutException ex) {
}
catch (IOException e) {
}
 finally {
final int state;
if (downloadCanceled) {
state=DOWNLOAD_CANCEL;
}
 else if (downloadSuccess) {
state=DOWNLOAD_SUCCESS;
}
 else {
state=DOWNLOAD_FAILURE;
}
downloadFinishHandler.sendEmptyMessage(state);
if (state != DOWNLOAD_SUCCESS) {
file.delete();
}
}
}
}
).start();
}
