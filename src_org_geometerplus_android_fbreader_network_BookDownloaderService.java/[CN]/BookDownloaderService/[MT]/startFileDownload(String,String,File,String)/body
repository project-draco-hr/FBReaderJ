{
  myDownloadingURLs.add(urlString);
  sendDownloaderCallback();
  final int notificationId=NetworkNotifications.Instance().getBookDownloadingId();
  final Notification progressNotification=createDownloadProgressNotification(title);
  final NotificationManager notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  myOngoingNotifications.add(Integer.valueOf(notificationId));
  notificationManager.notify(notificationId,progressNotification);
  final Handler progressHandler=new Handler(){
    public void handleMessage(    Message message){
      final int progress=message.what;
      final RemoteViews contentView=(RemoteViews)progressNotification.contentView;
      if (progress < 0) {
        contentView.setTextViewText(R.id.download_notification_progress_text,"");
        contentView.setProgressBar(R.id.download_notification_progress_bar,100,0,true);
      }
 else {
        contentView.setTextViewText(R.id.download_notification_progress_text,"" + progress + "%");
        contentView.setProgressBar(R.id.download_notification_progress_bar,100,progress,false);
      }
      final NotificationManager notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
      notificationManager.notify(notificationId,progressNotification);
    }
  }
;
  final Handler downloadFinishHandler=new Handler(){
    public void handleMessage(    Message message){
      myDownloadingURLs.remove(urlString);
      final NotificationManager notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
      notificationManager.cancel(notificationId);
      myOngoingNotifications.remove(Integer.valueOf(notificationId));
      notificationManager.notify(notificationId,createDownloadFinishNotification(file,title,message.what != 0));
      sendDownloaderCallback();
      doStop();
    }
  }
;
  final ZLNetworkRequest request=new ZLNetworkRequest(urlString,sslCertificate){
    public void handleStream(    URLConnection connection,    InputStream inputStream) throws IOException, ZLNetworkException {
      final int updateIntervalMillis=1000;
      final int fileLength=connection.getContentLength();
      int downloadedPart=0;
      long progressTime=System.currentTimeMillis() + updateIntervalMillis;
      if (fileLength <= 0) {
        progressHandler.sendEmptyMessage(-1);
      }
      OutputStream outStream;
      try {
        outStream=new FileOutputStream(file);
      }
 catch (      FileNotFoundException ex) {
        throw new ZLNetworkException(ZLNetworkException.ERROR_CREATE_FILE,file.getPath());
      }
      try {
        final byte[] buffer=new byte[8192];
        while (true) {
          final int size=inputStream.read(buffer);
          if (size <= 0) {
            break;
          }
          downloadedPart+=size;
          if (fileLength > 0) {
            final long currentTime=System.currentTimeMillis();
            if (currentTime > progressTime) {
              progressTime=currentTime + updateIntervalMillis;
              progressHandler.sendEmptyMessage(downloadedPart * 100 / fileLength);
            }
          }
          outStream.write(buffer,0,size);
        }
      }
  finally {
        outStream.close();
      }
    }
  }
;
  final Thread downloader=new Thread(new Runnable(){
    public void run(){
      try {
        ZLNetworkManager.Instance().perform(request);
      }
 catch (      ZLNetworkException e) {
        file.delete();
        downloadFinishHandler.sendEmptyMessage(0);
      }
      downloadFinishHandler.sendEmptyMessage(1);
    }
  }
);
  downloader.setPriority(Thread.MIN_PRIORITY);
  downloader.start();
}
