{
  final NetworkLibrary library=NetworkLibrary.Instance();
  final List<Language> allLanguages=new ArrayList<Language>();
  for (  String code : library.languageCodes()) {
    allLanguages.add(new Language(code));
  }
  Collections.sort(allLanguages);
  final Collection<String> activeLanguageCodes=library.activeLanguageCodes();
  final CharSequence[] languageNames=new CharSequence[allLanguages.size()];
  final boolean[] checked=new boolean[allLanguages.size()];
  int index=0;
  for (  Language language : allLanguages) {
    languageNames[index]=language.Name;
    checked[index]=activeLanguageCodes.contains(language.Code);
    ++index;
  }
  final DialogInterface.OnMultiChoiceClickListener listener=new DialogInterface.OnMultiChoiceClickListener(){
    public void onClick(    DialogInterface dialog,    int which,    boolean isChecked){
      checked[which]=isChecked;
    }
  }
;
  final ZLResource dialogResource=ZLResource.resource("dialog");
  final AlertDialog dialog=new AlertDialog.Builder(myActivity).setMultiChoiceItems(languageNames,checked,listener).setTitle(dialogResource.getResource("languageFilterDialog").getResource("title").getValue()).setPositiveButton(dialogResource.getResource("button").getResource("ok").getValue(),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final TreeSet<Language> newActiveLanguages=new TreeSet<Language>();
      for (int i=0; i < checked.length; ++i) {
        if (checked[i]) {
          newActiveLanguages.add(allLanguages.get(i));
        }
      }
      final List<String> codes=new ArrayList<String>(newActiveLanguages.size());
      for (      Language language : newActiveLanguages) {
        codes.add(language.Code);
      }
      library.setActiveLanguageCodes(codes);
      library.synchronize();
    }
  }
).create();
  dialog.show();
}
