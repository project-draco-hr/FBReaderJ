{
  final NetworkLibrary library=NetworkLibrary.Instance();
  final List<String> allLanguageCodes=library.languageCodes();
  Collections.sort(allLanguageCodes,new ZLLanguageUtil.CodeComparator());
  final Collection<String> activeLanguageCodes=library.activeLanguageCodes();
  final CharSequence[] languageNames=new CharSequence[allLanguageCodes.size()];
  final boolean[] checked=new boolean[allLanguageCodes.size()];
  for (int i=0; i < allLanguageCodes.size(); ++i) {
    final String code=allLanguageCodes.get(i);
    languageNames[i]=ZLLanguageUtil.languageName(code);
    checked[i]=activeLanguageCodes.contains(code);
  }
  final DialogInterface.OnMultiChoiceClickListener listener=new DialogInterface.OnMultiChoiceClickListener(){
    public void onClick(    DialogInterface dialog,    int which,    boolean isChecked){
      checked[which]=isChecked;
    }
  }
;
  final ZLResource dialogResource=ZLResource.resource("dialog");
  final AlertDialog dialog=new AlertDialog.Builder(myActivity).setMultiChoiceItems(languageNames,checked,listener).setTitle(dialogResource.getResource("languageFilterDialog").getResource("title").getValue()).setPositiveButton(dialogResource.getResource("button").getResource("ok").getValue(),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final TreeSet<String> newActiveCodes=new TreeSet<String>(new ZLLanguageUtil.CodeComparator());
      for (int i=0; i < checked.length; ++i) {
        if (checked[i]) {
          newActiveCodes.add(allLanguageCodes.get(i));
        }
      }
      library.setActiveLanguageCodes(newActiveCodes);
      library.synchronize();
    }
  }
).create();
  dialog.show();
}
