{
  boolean doStrongRebuild=myDoStrongRebuild || (myScanSubdirs != ScanSubdirsOption.getValue()) || (myPath != PathOption.getValue());
  if (!doStrongRebuild && !myDoWeakRebuild) {
    return false;
  }
  myPath=PathOption.getValue();
  myScanSubdirs=ScanSubdirsOption.getValue();
  myDoWeakRebuild=false;
  myDoStrongRebuild=false;
  if (doStrongRebuild) {
    myAuthors.clear();
    myCollection.clear();
    myExternalBooks.clear();
    final ArrayList fileNamesSet=collectBookFileNames();
    final int sizeOfSet=fileNamesSet.size();
    for (int i=0; i < sizeOfSet; ++i) {
      addDescription(BookDescription.getDescription((String)fileNamesSet.get(i)));
    }
    final ArrayList bookListFileNames=new BookList().fileNames();
    final int sizeOfList=bookListFileNames.size();
    for (int i=0; i < sizeOfList; ++i) {
      final String fileName=(String)bookListFileNames.get(i);
      if (!fileNamesSet.contains(fileName)) {
        BookDescription description=BookDescription.getDescription(fileName);
        if (description != null) {
          addDescription(description);
          addExternalBook(description);
        }
      }
    }
  }
 else {
    final BookList bookList=new BookList();
    final ArrayList bookListSet=bookList.fileNames();
    final ArrayList fileNames=new ArrayList();
    final ArrayList list=new ArrayList(myCollection.keySet());
    for (int i=0; i < list.size(); ++i) {
      final ArrayList books=(ArrayList)myCollection.get(list.get(i));
      final int numberOfBooks=books.size();
      for (int j=0; j < numberOfBooks; ++j) {
        final BookDescription description=(BookDescription)books.get(j);
        final String fileName=description.FileName;
        if (!myExternalBooks.contains(description) || bookListSet.contains(fileName)) {
          fileNames.add(fileName);
        }
      }
    }
    myCollection.clear();
    myAuthors.clear();
    final int fileNamesSize=fileNames.size();
    for (int i=0; i < fileNamesSize; ++i) {
      addDescription(BookDescription.getDescription((String)fileNames.get(i),false));
    }
  }
  if (myAuthors != null) {
    Collections.sort(myAuthors,new Author.AuthorComparator());
  }
  DescriptionComparator descriptionComparator=new DescriptionComparator();
  for (Iterator it=myCollection.keySet().iterator(); it.hasNext(); ) {
    ArrayList list=(ArrayList)myCollection.get(it.next());
    if (list != null) {
      Collections.sort(list,descriptionComparator);
    }
  }
  return true;
}
