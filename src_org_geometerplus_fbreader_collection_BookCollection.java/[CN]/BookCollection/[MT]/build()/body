{
  final HashMap<Tag,TagTree> tagTreeMap=new HashMap<Tag,TagTree>();
  final HashMap<Author,AuthorTree> authorTreeMap=new HashMap<Author,AuthorTree>();
  final HashMap<AuthorSeriesPair,SeriesTree> seriesTreeMap=new HashMap<AuthorSeriesPair,SeriesTree>();
  final HashMap<Long,BookDescription> bookById=new HashMap<Long,BookDescription>();
  collectBookDescriptions();
  for (  BookDescription description : myBookDescriptions) {
    bookById.put(description.getBookId(),description);
    List<Author> authors=description.authors();
    if (authors.isEmpty()) {
      authors=(List<Author>)ourNullList;
    }
    final SeriesInfo seriesInfo=description.getSeriesInfo();
    for (    Author a : authors) {
      AuthorTree authorTree=authorTreeMap.get(a);
      if (authorTree == null) {
        authorTree=myCollectionByAuthor.createAuthorSubTree(a);
        authorTreeMap.put(a,authorTree);
      }
      if (seriesInfo == null) {
        authorTree.createBookSubTree(description,false);
      }
 else {
        final String series=seriesInfo.Name;
        final AuthorSeriesPair pair=new AuthorSeriesPair(a,series);
        SeriesTree seriesTree=seriesTreeMap.get(pair);
        if (seriesTree == null) {
          seriesTree=authorTree.createSeriesSubTree(series);
          seriesTreeMap.put(pair,seriesTree);
        }
        seriesTree.createBookInSeriesSubTree(description);
      }
    }
    List<Tag> tags=description.tags();
    if (tags.isEmpty()) {
      tags=(List<Tag>)ourNullList;
    }
    for (    Tag t : tags) {
      getTagTree(t,tagTreeMap).createBookSubTree(description,true);
    }
  }
  final BooksDatabase db=BooksDatabase.Instance();
  for (  long id : db.listRecentBookIds()) {
    BookDescription description=bookById.get(id);
    if (description != null) {
      myRecentBooks.createBookSubTree(description,true);
    }
  }
  db.executeAsATransaction(new Runnable(){
    public void run(){
      for (      BookDescription description : myBookDescriptions) {
        description.save();
      }
    }
  }
);
}
