{
  try {
    final ZLImage image=CoverUtil.getCover(DataUtil.fileFromEncodedPath(uri.substring(7)),PluginCollection.Instance());
    if (image instanceof ZLFileImageProxy) {
      final ZLFileImageProxy proxy=(ZLFileImageProxy)image;
      proxy.synchronize();
      final ZLStreamImage realImage=proxy.getRealImage();
      if (realImage == null) {
        return notFound(uri);
      }
      InputStream stream=realImage.inputStream();
      if (stream == null) {
        return notFound(uri);
      }
      final BitmapFactory.Options options=new BitmapFactory.Options();
      options.inJustDecodeBounds=true;
      try {
        BitmapFactory.decodeStream(stream,null,options);
      }
 catch (      Exception e) {
        return notFound(uri);
      }
      if (options.outWidth <= 0 || options.outHeight <= 0) {
        return notFound(uri);
      }
      stream.close();
      stream=realImage.inputStream();
      if (stream == null) {
        return notFound(uri);
      }
      final Response res=new Response(Response.Status.OK,MimeType.IMAGE_PNG.toString(),stream);
      res.addHeader("X-Width",String.valueOf(options.outWidth));
      res.addHeader("X-Height",String.valueOf(options.outHeight));
      return res;
    }
 else     if (image instanceof PluginImage) {
      final PluginImage pluginImage=(PluginImage)image;
      if (pluginImage.isSynchronized()) {
        try {
          final Bitmap bitmap=((ZLBitmapImage)pluginImage.getRealImage()).getBitmap();
          final ByteArrayOutputStream os=new ByteArrayOutputStream();
          bitmap.compress(Bitmap.CompressFormat.JPEG,85,os);
          final InputStream is=new ByteArrayInputStream(os.toByteArray());
          final Response res=new Response(Response.Status.OK,MimeType.IMAGE_JPEG.toString(),is);
          res.addHeader("X-Width",String.valueOf(bitmap.getWidth()));
          res.addHeader("X-Height",String.valueOf(bitmap.getHeight()));
          return res;
        }
 catch (        Throwable t) {
          return noContent(uri);
        }
      }
 else {
        myService.ImageSynchronizer.synchronize(pluginImage,null);
        return noContent(uri);
      }
    }
 else {
      return notFound(uri);
    }
  }
 catch (  Throwable t) {
    return forbidden(uri,t);
  }
}
