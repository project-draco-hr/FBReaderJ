{
  final Response res;
  final InputStream baseStream=file.getInputStream();
  final int fileLength=baseStream.available();
  final String etag='"' + Integer.toHexString(file.getPath().hashCode()) + '"';
  final String range=headers.get("range");
  if (range == null || !range.startsWith(BYTES_PREFIX)) {
    if (etag.equals(headers.get("if-none-match")))     res=new Response(Response.Status.NOT_MODIFIED,mime,"");
 else {
      res=new Response(Response.Status.OK,mime,baseStream);
      res.addHeader("ETag",etag);
    }
  }
 else {
    int start=0;
    int end=-1;
    final String bytes=range.substring(BYTES_PREFIX.length());
    final int minus=bytes.indexOf('-');
    if (minus > 0) {
      try {
        start=Integer.parseInt(bytes.substring(0,minus));
        final String endString=bytes.substring(minus + 1).trim();
        if (!"".equals(endString)) {
          end=Integer.parseInt(endString);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
    if (start >= fileLength) {
      res=new Response(Response.Status.RANGE_NOT_SATISFIABLE,MimeType.TEXT_PLAIN.toString(),"");
      res.addHeader("ETag",etag);
      res.addHeader("Content-Range","bytes 0-0/" + fileLength);
    }
 else {
      if (end == -1 || end >= fileLength) {
        end=fileLength - 1;
      }
      res=new Response(Response.Status.PARTIAL_CONTENT,mime,new SliceInputStream(baseStream,start,end - start + 1));
      res.addHeader("ETag",etag);
      res.addHeader("Content-Range","bytes " + start + "-"+ end+ "/"+ fileLength);
    }
  }
  res.addHeader("Accept-Ranges","bytes");
  return res;
}
