{
  final HashMap<String,char[]> entityMap=new HashMap<String,char[]>();
  entityMap.put("amp",new char[]{'&'});
  entityMap.put("apos",new char[]{'\''});
  entityMap.put("gt",new char[]{'>'});
  entityMap.put("lt",new char[]{'<'});
  entityMap.put("quot",new char[]{'\"'});
  final InputStreamReader streamReader=myStreamReader;
  final ZLXMLReader xmlReader=myXMLReader;
  final char[] buffer=myBuffer;
  final StringContainer tagName=new StringContainer();
  final StringContainer attributeName=new StringContainer();
  final StringContainer attributeValue=new StringContainer();
  final boolean dontCacheAttributeValues=xmlReader.dontCacheAttributeValues();
  final StringContainer entityName=new StringContainer();
  final HashMap<StringContainer,String> strings=new HashMap<StringContainer,String>();
  final StringMap attributes=new StringMap();
  int state=START_DOCUMENT;
  int savedState=START_DOCUMENT;
  while (true) {
    int count=streamReader.read(buffer);
    if (count <= 0) {
      return;
    }
    int startPosition=0;
    for (int i=0; i < count; ++i) {
      char c=buffer[i];
switch (state) {
case START_DOCUMENT:
        while ((c != '<') && (++i < count)) {
          c=buffer[i];
        }
      if (c == '<') {
        state=LANGLE;
        startPosition=i + 1;
      }
    break;
case LANGLE:
switch (c) {
case '/':
    state=END_TAG;
  startPosition=i + 1;
break;
case '!':
case '?':
state=COMMENT;
break;
default :
state=START_TAG;
startPosition=i;
break;
}
break;
case COMMENT:
while ((c != '>') && (++i < count)) {
c=buffer[i];
}
if (c == '>') {
state=TEXT;
startPosition=i + 1;
}
break;
case START_TAG:
startTagLabel: while (true) {
switch (c) {
case 0x0008:
case 0x0009:
case 0x000A:
case 0x000B:
case 0x000C:
case 0x000D:
case ' ':
state=WS_AFTER_START_TAG_NAME;
tagName.append(buffer,startPosition,i - startPosition);
break startTagLabel;
case '>':
state=TEXT;
tagName.append(buffer,startPosition,i - startPosition);
processStartTag(xmlReader,convertToString(strings,tagName),attributes);
startPosition=i + 1;
break startTagLabel;
case '/':
state=SLASH;
tagName.append(buffer,startPosition,i - startPosition);
processFullTag(xmlReader,convertToString(strings,tagName),attributes);
break startTagLabel;
case '&':
savedState=START_TAG;
state=ENTITY_REF;
startPosition=i + 1;
break startTagLabel;
default :
if (++i == count) {
tagName.append(buffer,startPosition,i - startPosition);
break startTagLabel;
}
break;
}
c=buffer[i];
}
break;
case WS_AFTER_START_TAG_NAME:
switch (c) {
case '>':
processStartTag(xmlReader,convertToString(strings,tagName),attributes);
state=TEXT;
startPosition=i + 1;
break;
case '/':
state=SLASH;
processFullTag(xmlReader,convertToString(strings,tagName),attributes);
break;
case 0x0008:
case 0x0009:
case 0x000A:
case 0x000B:
case 0x000C:
case 0x000D:
case ' ':
break;
default :
state=ATTRIBUTE_NAME;
startPosition=i;
break;
}
break;
case ATTRIBUTE_NAME:
attributeNameLabel: while (true) {
switch (c) {
case '=':
state=WAIT_ATTRIBUTE_VALUE;
break attributeNameLabel;
case '&':
savedState=ATTRIBUTE_NAME;
state=ENTITY_REF;
startPosition=i + 1;
break attributeNameLabel;
case 0x0008:
case 0x0009:
case 0x000A:
case 0x000B:
case 0x000C:
case 0x000D:
case ' ':
state=WAIT_EQUALS;
break attributeNameLabel;
default :
if (++i == count) {
break attributeNameLabel;
}
break;
}
c=buffer[i];
}
attributeName.append(buffer,startPosition,i - startPosition);
break;
case WAIT_EQUALS:
if (c == '=') {
state=WAIT_ATTRIBUTE_VALUE;
}
break;
case WAIT_ATTRIBUTE_VALUE:
if (c == '"') {
state=ATTRIBUTE_VALUE;
startPosition=i + 1;
}
break;
case ATTRIBUTE_VALUE:
while ((c != '"') && (c != '&') && (++i < count)) {
c=buffer[i];
}
attributeValue.append(buffer,startPosition,i - startPosition);
if (c == '"') {
state=WS_AFTER_START_TAG_NAME;
if (dontCacheAttributeValues) {
attributes.put(convertToString(strings,attributeName),attributeValue.toString());
attributeValue.clear();
}
 else {
attributes.put(convertToString(strings,attributeName),convertToString(strings,attributeValue));
}
}
 else if (c == '&') {
savedState=ATTRIBUTE_VALUE;
state=ENTITY_REF;
startPosition=i + 1;
}
break;
case ENTITY_REF:
while ((c != ';') && (++i < count)) {
c=buffer[i];
}
entityName.append(buffer,startPosition,i - startPosition);
if (c == ';') {
state=savedState;
startPosition=i + 1;
final String name=convertToString(strings,entityName);
char[] value=entityMap.get(name);
if (value == null) {
if ((name.length() > 0) && (name.charAt(0) == '#')) {
try {
int number;
if (name.charAt(1) == 'x') {
number=Integer.parseInt(name.substring(2),16);
}
 else {
number=Integer.parseInt(name.substring(1));
}
value=new char[]{(char)number};
entityMap.put(name,value);
}
 catch (NumberFormatException e) {
}
}
}
if (value != null) {
switch (state) {
case ATTRIBUTE_VALUE:
attributeValue.append(value,0,value.length);
break;
case ATTRIBUTE_NAME:
attributeName.append(value,0,value.length);
break;
case START_TAG:
case END_TAG:
tagName.append(value,0,value.length);
break;
case TEXT:
xmlReader.characterDataHandler(value,0,value.length);
break;
}
}
}
break;
case SLASH:
if (c == '>') {
state=TEXT;
startPosition=i + 1;
}
break;
case END_TAG:
endTagLabel: while (true) {
switch (c) {
case '>':
tagName.append(buffer,startPosition,i - startPosition);
processEndTag(xmlReader,convertToString(strings,tagName));
state=TEXT;
startPosition=i + 1;
break endTagLabel;
case '&':
savedState=END_TAG;
state=ENTITY_REF;
startPosition=i + 1;
break endTagLabel;
case 0x0008:
case 0x0009:
case 0x000A:
case 0x000B:
case 0x000C:
case 0x000D:
case ' ':
tagName.append(buffer,startPosition,i - startPosition);
state=WS_AFTER_END_TAG_NAME;
break endTagLabel;
default :
if (++i == count) {
tagName.append(buffer,startPosition,i - startPosition);
break endTagLabel;
}
break;
}
c=buffer[i];
}
break;
case WS_AFTER_END_TAG_NAME:
if (c == '>') {
state=TEXT;
processEndTag(xmlReader,convertToString(strings,tagName));
startPosition=i + 1;
}
break;
case TEXT:
while ((c != '<') && (c != '&') && (++i < count)) {
c=buffer[i];
}
if (i > startPosition) {
if (c == '<') {
xmlReader.characterDataHandlerFinal(buffer,startPosition,i - startPosition);
}
 else {
xmlReader.characterDataHandler(buffer,startPosition,i - startPosition);
}
}
if (c == '<') {
state=LANGLE;
}
 else if (c == '&') {
savedState=TEXT;
state=ENTITY_REF;
startPosition=i + 1;
}
break;
}
}
}
}
