{
  if (length != 0) {
    if (ourBreaks.length < length) {
      ourBreaks=new byte[length];
    }
    final byte[] breaks=ourBreaks;
    myLineBreaker.setLineBreaks(data,offset,length,breaks);
    final ZLTextElement hSpace=ZLTextElement.HSpace;
    final ZLTextElement nbSpace=ZLTextElement.NBSpace;
    final ArrayList<ZLTextElement> elements=myElements;
    char ch=0;
    char previousChar=0;
    int spaceState=NO_SPACE;
    int wordStart=0;
    for (int index=0; index < length; ++index) {
      previousChar=ch;
      ch=data[offset + index];
      if (Character.isWhitespace(ch)) {
        if (index > 0 && spaceState == NO_SPACE) {
          addWord(data,offset + wordStart,index - wordStart,myOffset + wordStart,hyperlink);
        }
        spaceState=SPACE;
      }
 else       if (Character.isSpaceChar(ch)) {
        if (index > 0 && spaceState == NO_SPACE) {
          addWord(data,offset + wordStart,index - wordStart,myOffset + wordStart,hyperlink);
        }
        elements.add(nbSpace);
        if (spaceState != SPACE) {
          spaceState=NON_BREAKABLE_SPACE;
        }
      }
 else {
switch (spaceState) {
case SPACE:
          elements.add(hSpace);
        wordStart=index;
      break;
case NON_BREAKABLE_SPACE:
    wordStart=index;
  break;
case NO_SPACE:
if (index > 0 && breaks[index - 1] != LineBreaker.NOBREAK && previousChar != '-' && index != wordStart) {
  addWord(data,offset + wordStart,index - wordStart,myOffset + wordStart,hyperlink);
  wordStart=index;
}
break;
}
spaceState=NO_SPACE;
}
}
switch (spaceState) {
case SPACE:
elements.add(hSpace);
break;
case NON_BREAKABLE_SPACE:
elements.add(nbSpace);
break;
case NO_SPACE:
addWord(data,offset + wordStart,length - wordStart,myOffset + wordStart,hyperlink);
break;
}
myOffset+=length;
}
}
