{
  try {
    final InputStream stream;
    if (myOffsets.length == 1) {
      final int offset=myOffsets[0];
      final int length=myLengths[0];
      stream=new SliceInputStream(myFile.getInputStream(),offset,length != 0 ? length : Integer.MAX_VALUE);
    }
 else {
      final InputStream[] streams=new InputStream[myOffsets.length];
      for (int i=0; i < myOffsets.length; ++i) {
        final int offset=myOffsets[i];
        final int length=myLengths[i];
        streams[i]=new SliceInputStream(myFile.getInputStream(),offset,length != 0 ? length : Integer.MAX_VALUE);
      }
      stream=new MergedInputStream(streams);
    }
    if (ENCODING_NONE.equals(myEncoding)) {
      return stream;
    }
 else     if (ENCODING_HEX.equals(myEncoding)) {
      return new HexInputStream(stream);
    }
 else     if (ENCODING_BASE64.equals(myEncoding)) {
      return new Base64InputStream(stream);
    }
 else {
      System.err.println("unsupported encoding: " + myEncoding);
      return null;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}
