{
  final LinkedList<FBTree> toRemove=new LinkedList<FBTree>();
  ListIterator<FBTree> nodeIterator=myRootTree.subTrees().listIterator();
  FBTree currentNode=null;
  int nodeCount=0;
  final ArrayList<INetworkLink> links=new ArrayList<INetworkLink>(activeLinks());
  Collections.sort(links);
  for (int i=0; i < links.size(); ++i) {
    INetworkLink link=links.get(i);
    boolean processed=false;
    while (currentNode != null || nodeIterator.hasNext()) {
      if (currentNode == null) {
        currentNode=nodeIterator.next();
      }
      if (!(currentNode instanceof NetworkCatalogTree)) {
        toRemove.add(currentNode);
        currentNode=null;
        ++nodeCount;
        continue;
      }
      final INetworkLink nodeLink=((NetworkCatalogTree)currentNode).Item.Link;
      if (link == nodeLink) {
        if (linkIsChanged(link)) {
          toRemove.add(currentNode);
        }
 else {
          processed=true;
        }
        currentNode=null;
        ++nodeCount;
        break;
      }
 else {
        INetworkLink newNodeLink=null;
        for (int j=i; j < links.size(); ++j) {
          final INetworkLink jlnk=links.get(j);
          if (nodeLink == jlnk) {
            newNodeLink=jlnk;
            break;
          }
        }
        if (newNodeLink == null || linkIsChanged(nodeLink)) {
          toRemove.add(currentNode);
          currentNode=null;
          ++nodeCount;
        }
 else {
          break;
        }
      }
    }
    if (!processed) {
      makeValid(link);
      final int nextIndex=nodeIterator.nextIndex();
      new NetworkCatalogRootTree(myRootTree,link,nodeCount++).Item.onDisplayItem();
      nodeIterator=myRootTree.subTrees().listIterator(nextIndex + 1);
    }
  }
  while (currentNode != null || nodeIterator.hasNext()) {
    if (currentNode == null) {
      currentNode=nodeIterator.next();
    }
    toRemove.add(currentNode);
    currentNode=null;
  }
  for (  FBTree tree : toRemove) {
    tree.removeSelf();
  }
  new AddCustomCatalogItemTree(myRootTree);
  mySearchItemTree=new SearchItemTree(myRootTree,0);
  fireModelChangedEvent(ChangeListener.Code.SomeCode);
}
