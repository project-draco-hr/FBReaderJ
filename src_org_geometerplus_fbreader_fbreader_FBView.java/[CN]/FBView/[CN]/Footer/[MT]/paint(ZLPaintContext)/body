{
  if (myReader.Model == null) {
    return;
  }
  final ZLColor bgColor=getBackgroundColor();
  final ZLColor fgColor=getTextColor(FBHyperlinkType.NONE);
  final ZLColor fillColor=myReader.getColorProfile().FooterFillOption.getValue();
  final int left=getLeftMargin();
  final int right=context.getWidth() - getRightMargin();
  final int height=getHeight();
  final int lineWidth=height <= 10 ? 1 : 2;
  final int delta=height <= 10 ? 0 : 1;
  context.setFont(myReader.FooterFontOption.getValue(),height <= 10 ? height + 3 : height + 1,height > 10,false,false);
  final int pagesProgress=computeCurrentPage();
  final int bookLength=computePageNumber();
  final StringBuilder info=new StringBuilder();
  if (myReader.FooterShowProgressOption.getValue()) {
    info.append(pagesProgress);
    info.append("/");
    info.append(bookLength);
  }
  if (myReader.FooterShowBatteryOption.getValue()) {
    if (info.length() > 0) {
      info.append(" ");
    }
    info.append(myReader.getBatteryLevel());
    info.append("%");
  }
  if (myReader.FooterShowClockOption.getValue()) {
    if (info.length() > 0) {
      info.append(" ");
    }
    info.append(ZLibrary.Instance().getCurrentTimeString());
  }
  final String infoString=info.toString();
  final int infoWidth=context.getStringWidth(infoString);
  context.clear(bgColor);
  context.setTextColor(fgColor);
  context.drawString(right - infoWidth,height - delta,infoString);
  final int gaugeRight=right - (infoWidth == 0 ? 0 : infoWidth + 10);
  myGaugeWidth=gaugeRight - left - 2 * lineWidth;
  context.setLineColor(fgColor);
  context.setLineWidth(lineWidth);
  context.drawLine(left,lineWidth,left,height - lineWidth);
  context.drawLine(left,height - lineWidth,gaugeRight,height - lineWidth);
  context.drawLine(gaugeRight,height - lineWidth,gaugeRight,lineWidth);
  context.drawLine(gaugeRight,lineWidth,left,lineWidth);
  final int gaugeInternalRight=left + lineWidth + (int)(1.0 * myGaugeWidth * pagesProgress / bookLength);
  context.setFillColor(fillColor);
  context.fillRectangle(left + lineWidth,height - 2 * lineWidth,gaugeInternalRight,2 * lineWidth);
  if (myReader.FooterShowTOCMarksOption.getValue()) {
    TOCTree toc=myReader.Model.TOCTree;
    if (toc != null) {
      final int fullLength=sizeOfFullText();
      for (      TOCTree tocItem : toc) {
        TOCTree.Reference reference=tocItem.getReference();
        if (reference != null) {
          final int refCoord=sizeOfTextBeforeParagraph(reference.ParagraphIndex);
          final int xCoord=left + 2 * lineWidth + (int)(1.0 * myGaugeWidth * refCoord / fullLength);
          context.drawLine(xCoord,height - lineWidth,xCoord,lineWidth);
        }
      }
    }
  }
}
