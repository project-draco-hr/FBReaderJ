{
  if (myCounter >= myLength) {
    return false;
  }
  int dataOffset=myDataOffset;
  char[] data=myStorage.block(myDataIndex);
  if (data == null) {
    return false;
  }
  if (dataOffset >= data.length) {
    data=myStorage.block(++myDataIndex);
    if (data == null) {
      return false;
    }
    dataOffset=0;
  }
  short first=(short)data[dataOffset];
  byte type=(byte)first;
  if (type == 0) {
    data=myStorage.block(++myDataIndex);
    if (data == null) {
      return false;
    }
    dataOffset=0;
    first=(short)data[0];
    type=(byte)first;
  }
  myType=type;
  ++dataOffset;
switch (type) {
case ZLTextParagraph.Entry.TEXT:
{
      int textLength=(int)data[dataOffset++];
      textLength+=(((int)data[dataOffset++]) << 16);
      textLength=Math.min(textLength,data.length - dataOffset);
      myTextLength=textLength;
      myTextData=data;
      myTextOffset=dataOffset;
      dataOffset+=textLength;
      break;
    }
case ZLTextParagraph.Entry.CONTROL:
{
    short kind=(short)data[dataOffset++];
    myControlKind=(byte)kind;
    myControlIsStart=(kind & 0x0100) == 0x0100;
    myHyperlinkType=0;
    break;
  }
case ZLTextParagraph.Entry.HYPERLINK_CONTROL:
{
  final short kind=(short)data[dataOffset++];
  myControlKind=(byte)kind;
  myControlIsStart=true;
  myHyperlinkType=(byte)(kind >> 8);
  final short labelLength=(short)data[dataOffset++];
  myHyperlinkId=new String(data,dataOffset,labelLength);
  dataOffset+=labelLength;
  break;
}
case ZLTextParagraph.Entry.IMAGE:
{
final short vOffset=(short)data[dataOffset++];
final short len=(short)data[dataOffset++];
final String id=new String(data,dataOffset,len);
dataOffset+=len;
final boolean isCover=data[dataOffset++] != 0;
myImageEntry=new ZLImageEntry(myImageMap,id,vOffset,isCover);
break;
}
case ZLTextParagraph.Entry.FIXED_HSPACE:
myFixedHSpaceLength=(short)data[dataOffset++];
break;
case ZLTextParagraph.Entry.STYLE_CSS:
case ZLTextParagraph.Entry.STYLE_OTHER:
{
final short depth=(short)((first >> 8) & 0xFF);
final ZLTextStyleEntry entry=type == ZLTextParagraph.Entry.STYLE_CSS ? new ZLTextCSSStyleEntry(depth) : new ZLTextOtherStyleEntry();
final short mask=(short)data[dataOffset++];
for (int i=0; i < NUMBER_OF_LENGTHS; ++i) {
if (ZLTextStyleEntry.isFeatureSupported(mask,i)) {
final short size=(short)data[dataOffset++];
final byte unit=(byte)data[dataOffset++];
entry.setLength(i,size,unit);
}
}
if (ZLTextStyleEntry.isFeatureSupported(mask,ALIGNMENT_TYPE) || ZLTextStyleEntry.isFeatureSupported(mask,NON_LENGTH_VERTICAL_ALIGN)) {
final short value=(short)data[dataOffset++];
if (ZLTextStyleEntry.isFeatureSupported(mask,ALIGNMENT_TYPE)) {
entry.setAlignmentType((byte)(value & 0xFF));
}
if (ZLTextStyleEntry.isFeatureSupported(mask,NON_LENGTH_VERTICAL_ALIGN)) {
entry.setVerticalAlignCode((byte)((value >> 8) & 0xFF));
}
}
if (ZLTextStyleEntry.isFeatureSupported(mask,FONT_FAMILY)) {
entry.setFontFamilies(myFontManager,(short)data[dataOffset++]);
}
if (ZLTextStyleEntry.isFeatureSupported(mask,FONT_STYLE_MODIFIER)) {
final short value=(short)data[dataOffset++];
entry.setFontModifiers((byte)(value & 0xFF),(byte)((value >> 8) & 0xFF));
}
myStyleEntry=entry;
}
case ZLTextParagraph.Entry.STYLE_CLOSE:
break;
case ZLTextParagraph.Entry.RESET_BIDI:
break;
case ZLTextParagraph.Entry.AUDIO:
break;
case ZLTextParagraph.Entry.VIDEO:
{
myVideoEntry=new ZLVideoEntry();
final short mapSize=(short)data[dataOffset++];
for (short i=0; i < mapSize; ++i) {
short len=(short)data[dataOffset++];
final String mime=new String(data,dataOffset,len);
dataOffset+=len;
len=(short)data[dataOffset++];
final String src=new String(data,dataOffset,len);
dataOffset+=len;
myVideoEntry.addSource(mime,src);
}
break;
}
case ZLTextParagraph.Entry.FBREADER_SPECIAL:
{
final short kindLength=(short)data[dataOffset++];
final String kind=new String(data,dataOffset,kindLength);
dataOffset+=kindLength;
final Map<String,String> map=new HashMap<String,String>();
final short dataSize=(short)((first >> 8) & 0xFF);
for (short i=0; i < dataSize; ++i) {
final short keyLength=(short)data[dataOffset++];
final String key=new String(data,dataOffset,keyLength);
dataOffset+=keyLength;
final short valueLength=(short)data[dataOffset++];
map.put(key,new String(data,dataOffset,valueLength));
dataOffset+=valueLength;
}
myFBReaderSpecialEntry=new FBReaderSpecialEntry(kind,map);
break;
}
}
++myCounter;
myDataOffset=dataOffset;
return true;
}
