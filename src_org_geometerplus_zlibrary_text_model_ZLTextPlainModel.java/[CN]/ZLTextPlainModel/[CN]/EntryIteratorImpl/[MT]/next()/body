{
  int dataOffset=myDataOffset;
  char[] data=myStorage.block(myDataIndex);
  if (dataOffset == data.length) {
    data=myStorage.block(++myDataIndex);
    dataOffset=0;
  }
  byte type=(byte)data[dataOffset];
  if (type == 0) {
    data=myStorage.block(++myDataIndex);
    dataOffset=0;
    type=(byte)data[0];
  }
  myType=type;
  ++dataOffset;
switch (type) {
case ZLTextParagraph.Entry.TEXT:
    myTextLength=((int)data[dataOffset++] << 16) + (int)data[dataOffset++];
  myTextData=data;
myTextOffset=dataOffset;
dataOffset+=myTextLength;
break;
case ZLTextParagraph.Entry.CONTROL:
{
short kind=(short)data[dataOffset++];
myControlKind=(byte)kind;
myControlIsStart=(kind & 0x0100) == 0x0100;
myHyperlinkType=(byte)(kind >> 9);
if (myHyperlinkType != 0) {
short labelLength=(short)data[dataOffset++];
myHyperlinkId=new String(data,dataOffset,labelLength);
dataOffset+=labelLength;
}
break;
}
case ZLTextParagraph.Entry.IMAGE:
{
final short vOffset=(short)data[dataOffset++];
final short len=(short)data[dataOffset++];
final String id=new String(data,dataOffset,len);
dataOffset+=len;
myImageEntry=new ZLImageEntry(myImageMap,id,vOffset);
break;
}
case ZLTextParagraph.Entry.FIXED_HSPACE:
myFixedHSpaceLength=(short)data[dataOffset++];
break;
case ZLTextParagraph.Entry.FORCED_CONTROL:
{
final int mask=(int)data[dataOffset++];
final ZLTextForcedControlEntry entry=new ZLTextForcedControlEntry();
if ((mask & ZLTextForcedControlEntry.SUPPORTS_LEFT_INDENT) == ZLTextForcedControlEntry.SUPPORTS_LEFT_INDENT) {
entry.setLeftIndent((short)data[dataOffset++]);
}
if ((mask & ZLTextForcedControlEntry.SUPPORTS_RIGHT_INDENT) == ZLTextForcedControlEntry.SUPPORTS_RIGHT_INDENT) {
entry.setRightIndent((short)data[dataOffset++]);
}
if ((mask & ZLTextForcedControlEntry.SUPPORTS_ALIGNMENT_TYPE) == ZLTextForcedControlEntry.SUPPORTS_ALIGNMENT_TYPE) {
entry.setAlignmentType((byte)data[dataOffset++]);
}
myForcedControlEntry=entry;
}
}
++myCounter;
myDataOffset=dataOffset;
}
