{
  mListviewFilesGestureDetector=new GestureDetector(this,new GestureDetector.SimpleOnGestureListener(){
    private Object getData(    float x,    float y){
      int i=getSubViewId(x,y);
      if (i >= 0)       return mViewFiles.getItemAtPosition(mViewFiles.getFirstVisiblePosition() + i);
      return null;
    }
    /** 
 * Gets {@link IFileDataModel} from {@code e}.
 * @param e {@link MotionEvent}.
 * @return the data model, or {@code null} if not available.
 */
    private IFileDataModel getDataModel(    MotionEvent e){
      Object o=getData(e.getX(),e.getY());
      return o instanceof IFileDataModel ? (IFileDataModel)o : null;
    }
    private int getSubViewId(    float x,    float y){
      Rect r=new Rect();
      for (int i=0; i < mViewFiles.getChildCount(); i++) {
        mViewFiles.getChildAt(i).getHitRect(r);
        if (r.contains((int)x,(int)y))         return i;
      }
      return -1;
    }
    @Override public void onLongPress(    MotionEvent e){
    }
    @Override public boolean onSingleTapConfirmed(    MotionEvent e){
      return false;
    }
    @Override public boolean onDoubleTap(    MotionEvent e){
      if (mDoubleTapToChooseFiles) {
        if (mIsMultiSelection)         return false;
        IFileDataModel data=getDataModel(e);
        if (data == null)         return false;
        if (data.getFile().isDirectory() && IFileProvider.FilterMode.FilesOnly.equals(mFileProvider.getFilterMode()))         return false;
        if (mIsSaveDialog) {
          if (data.getFile().isFile()) {
            mTxtSaveas.setText(data.getFile().getName());
            doCheckSaveasFilenameAndFinish(data.getFile().getName());
          }
 else           return false;
        }
 else         doFinish(data.getFile());
      }
 else {
        return false;
      }
      return true;
    }
    @Override public boolean onFling(    MotionEvent e1,    MotionEvent e2,    float velocityX,    float velocityY){
      final int _max_y_distance=19;
      final int _min_x_distance=80;
      final int _min_x_velocity=200;
      if (Math.abs(e1.getY() - e2.getY()) < _max_y_distance && Math.abs(e1.getX() - e2.getX()) > _min_x_distance && Math.abs(velocityX) > _min_x_velocity) {
        Object o=getData(e1.getX(),e1.getY());
        if (o instanceof IFileDataModel) {
          ((IFileDataModel)o).setTobeDeleted(true);
          mFileAdapter.notifyDataSetChanged();
          doDeleteFile((IFileDataModel)o);
        }
      }
      return false;
    }
  }
);
}
