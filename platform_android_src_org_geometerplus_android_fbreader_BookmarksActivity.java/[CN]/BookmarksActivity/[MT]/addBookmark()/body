{
  final FBReader fbreader=(FBReader)FBReader.Instance();
  ZLTextWordCursor cursor=fbreader.BookTextView.getStartCursor();
  if (cursor.isNull()) {
    return;
  }
  final ZLTextPosition position=new ZLTextPosition(cursor);
  final StringBuilder builder=new StringBuilder();
  final StringBuilder sentenceBuilder=new StringBuilder();
  cursor=new ZLTextWordCursor(cursor);
  int wordCounter=0;
  int sentenceCounter=0;
  int storedWordCounter=0;
  boolean lineIsNonEmpty=false;
  mainLoop:   while ((wordCounter < 20) && (sentenceCounter < 3)) {
    while (cursor.isEndOfParagraph()) {
      if (!cursor.nextParagraph()) {
        break mainLoop;
      }
      if (sentenceBuilder.length() > 0) {
        builder.append(sentenceBuilder);
        builder.append("\n");
        sentenceBuilder.delete(0,sentenceBuilder.length());
        ++sentenceCounter;
        storedWordCounter=wordCounter;
        lineIsNonEmpty=false;
      }
    }
    final ZLTextElement element=cursor.getElement();
    if (element instanceof ZLTextWord) {
      final ZLTextWord word=(ZLTextWord)element;
      if (lineIsNonEmpty) {
        sentenceBuilder.append(" ");
      }
      sentenceBuilder.append(word.Data,word.Offset,word.Length);
      ++wordCounter;
      lineIsNonEmpty=true;
switch (word.Data[word.Offset + word.Length - 1]) {
case '.':
case '!':
case '?':
        builder.append(sentenceBuilder);
      sentenceBuilder.delete(0,sentenceBuilder.length());
    ++sentenceCounter;
  storedWordCounter=wordCounter;
}
}
cursor.nextWord();
}
if (storedWordCounter < 4) {
builder.append(sentenceBuilder);
}
final Bookmark bookmark=new Bookmark(fbreader.Model.Book,builder.toString(),position);
myThisBookBookmarks.add(0,bookmark);
AllBooksBookmarks.add(0,bookmark);
invalidateAllViews();
}
