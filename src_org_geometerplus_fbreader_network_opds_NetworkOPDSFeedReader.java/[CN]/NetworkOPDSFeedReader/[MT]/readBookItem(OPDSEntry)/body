{
  final OPDSNetworkLink opdsNetworkLink=(OPDSNetworkLink)myData.Link;
  final LinkedList<String> tags=new LinkedList<String>();
  for (  ATOMCategory category : entry.Categories) {
    String term=category.getTerm();
    if (term != null) {
      tags.add(term);
    }
  }
  String cover=null;
  LinkedList<BookReference> references=new LinkedList<BookReference>();
  for (  ATOMLink link : entry.Links) {
    final String href=ZLNetworkUtil.url(myBaseURL,link.getHref());
    final String type=ZLNetworkUtil.filterMimeType(link.getType());
    final String rel=opdsNetworkLink.relation(link.getRel(),type);
    final int referenceType=typeByRelation(rel);
    if (OPDSConstants.REL_IMAGE_THUMBNAIL.equals(rel) || OPDSConstants.REL_THUMBNAIL.equals(rel)) {
      if (NetworkImage.MIME_PNG.equals(type) || NetworkImage.MIME_JPEG.equals(type)) {
        cover=href;
      }
    }
 else     if ((rel != null && rel.startsWith(OPDSConstants.REL_IMAGE_PREFIX)) || OPDSConstants.REL_COVER.equals(rel)) {
      if (cover == null && (NetworkImage.MIME_PNG.equals(type) || NetworkImage.MIME_JPEG.equals(type))) {
        cover=href;
      }
    }
 else     if (BookReference.Type.BUY == referenceType) {
      final OPDSLink opdsLink=(OPDSLink)link;
      String price=null;
      final OPDSPrice opdsPrice=opdsLink.selectBestPrice();
      if (opdsPrice != null) {
        price=BuyBookReference.price(opdsPrice.Price,opdsPrice.Currency);
      }
      if (price == null) {
        price=BuyBookReference.price(entry.getAttribute(OPDSXMLReader.KEY_PRICE),null);
      }
      if (price == null) {
        price="";
      }
      if (OPDSConstants.MIME_TEXT_HTML.equals(type)) {
        collectReferences(references,opdsLink,href,BookReference.Type.BUY_IN_BROWSER,price,true);
      }
 else {
        collectReferences(references,opdsLink,href,BookReference.Type.BUY,price,false);
      }
    }
 else     if (referenceType != BookReference.Type.UNKNOWN) {
      final int format=formatByMimeType(type);
      if (format != BookReference.Format.NONE) {
        references.add(new BookReference(href,format,referenceType));
      }
    }
  }
  LinkedList<NetworkBookItem.AuthorData> authors=new LinkedList<NetworkBookItem.AuthorData>();
  for (  ATOMAuthor author : entry.Authors) {
    String name=author.Name;
    final String lowerCased=name.toLowerCase();
    int index=lowerCased.indexOf(AuthorPrefix);
    if (index != -1) {
      name=name.substring(index + AuthorPrefix.length());
    }
 else {
      index=lowerCased.indexOf(AuthorsPrefix);
      if (index != -1) {
        name=name.substring(index + AuthorsPrefix.length());
      }
    }
    index=name.indexOf(',');
    NetworkBookItem.AuthorData authorData;
    if (index != -1) {
      final String before=name.substring(0,index).trim();
      final String after=name.substring(index + 1).trim();
      authorData=new NetworkBookItem.AuthorData(after + ' ' + before,before);
    }
 else {
      name=name.trim();
      index=name.lastIndexOf(' ');
      authorData=new NetworkBookItem.AuthorData(name,name.substring(index + 1));
    }
    authors.add(authorData);
  }
  final String annotation;
  if (entry.Summary != null) {
    annotation=entry.Summary;
  }
 else   if (entry.Content != null) {
    annotation=entry.Content;
  }
 else {
    annotation=null;
  }
  return new NetworkBookItem(opdsNetworkLink,entry.Id.Uri,myIndex++,entry.Title,annotation,authors,tags,entry.SeriesTitle,entry.SeriesIndex,cover,references);
}
