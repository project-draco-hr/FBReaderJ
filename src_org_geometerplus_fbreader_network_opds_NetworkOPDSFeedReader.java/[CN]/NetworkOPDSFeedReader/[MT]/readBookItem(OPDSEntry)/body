{
  final String date;
  if (entry.DCIssued != null) {
    date=entry.DCIssued.getDateTime(true);
  }
 else {
    date=null;
  }
  LinkedList<String> tags=new LinkedList<String>();
  for (  ATOMCategory category : entry.Categories) {
    String term=category.getTerm();
    if (term != null) {
      tags.add(term);
    }
  }
  HashMap<Integer,String> urlMap=new HashMap<Integer,String>();
  for (  ATOMLink link : entry.Links) {
    final String href=link.getHref();
    final String rel=intern(link.getRel());
    final String type=intern(link.getType());
    if (rel == OPDSConstants.REL_COVER || rel == OPDSConstants.REL_STANZA_COVER) {
      if (urlMap.get(NetworkLibraryItem.URLType.URL_COVER) == null && (type == OPDSConstants.MIME_IMG_PNG || type == OPDSConstants.MIME_IMG_JPEG)) {
        urlMap.put(NetworkLibraryItem.URLType.URL_COVER,href);
      }
    }
 else     if (rel == OPDSConstants.REL_THUMBNAIL || rel == OPDSConstants.REL_STANZA_THUMBNAIL) {
      if (type == OPDSConstants.MIME_IMG_PNG || type == OPDSConstants.MIME_IMG_JPEG) {
        urlMap.put(NetworkLibraryItem.URLType.URL_COVER,href);
      }
    }
 else     if (rel == OPDSConstants.REL_ACQUISITION || rel == null) {
      if (type == OPDSConstants.MIME_APP_FB2ZIP) {
        urlMap.put(NetworkLibraryItem.URLType.URL_BOOK_FB2_ZIP,href);
      }
 else       if (type == OPDSConstants.MIME_APP_EPUB) {
        urlMap.put(NetworkLibraryItem.URLType.URL_BOOK_EPUB,href);
      }
 else       if (type == OPDSConstants.MIME_APP_MOBI) {
        urlMap.put(NetworkLibraryItem.URLType.URL_BOOK_MOBIPOCKET,href);
      }
 else       if (type == OPDSConstants.MIME_APP_PDF) {
        urlMap.put(NetworkLibraryItem.URLType.URL_BOOK_PDF,href);
      }
    }
 else     if (rel == OPDSConstants.REL_ACQUISITION_SAMPLE) {
      if (type == OPDSConstants.MIME_APP_FB2ZIP) {
        urlMap.put(NetworkLibraryItem.URLType.URL_BOOK_DEMO_FB2_ZIP,href);
      }
    }
  }
  LinkedList<NetworkBookItem.AuthorData> authors=new LinkedList<NetworkBookItem.AuthorData>();
  for (  ATOMAuthor author : entry.Authors) {
    String name=author.Name;
    final String lowerCased=name.toLowerCase();
    int index=lowerCased.indexOf(AuthorPrefix);
    if (index != -1) {
      name=name.substring(index + AuthorPrefix.length());
    }
 else {
      index=lowerCased.indexOf(AuthorsPrefix);
      if (index != -1) {
        name=name.substring(index + AuthorsPrefix.length());
      }
    }
    index=name.indexOf(',');
    NetworkBookItem.AuthorData authorData;
    if (index != -1) {
      final String before=name.substring(0,index).trim();
      final String after=name.substring(index + 1).trim();
      authorData=new NetworkBookItem.AuthorData(after + ' ' + before,before);
    }
 else {
      name=name.trim();
      index=name.lastIndexOf(' ');
      authorData=new NetworkBookItem.AuthorData(name,name.substring(index + 1).trim());
    }
    authors.add(authorData);
  }
  return new NetworkBookItem(myData.Link,entry.Id.Uri,myIndex++,entry.Title,entry.Summary,entry.DCLanguage,date,null,authors,tags,entry.SeriesTitle,entry.SeriesIndex,urlMap);
}
