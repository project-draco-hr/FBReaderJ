{
  if (myItemsToLoad >= 0) {
    --myItemsToLoad;
  }
  if (entry.Id == null) {
    final String id=calculateEntryId(entry);
    if (id == null) {
      return tryInterrupt();
    }
    entry.Id=new ATOMId();
    entry.Id.Uri=id;
  }
  if (mySkipUntilId != null) {
    if (mySkipUntilId.equals(entry.Id.Uri)) {
      mySkipUntilId=null;
    }
    return tryInterrupt();
  }
  myData.LastLoadedId=entry.Id.Uri;
  final OPDSLink opdsLink=(OPDSLink)myData.Link;
  if (opdsLink.getCondition(entry.Id.Uri) == OPDSLink.FeedCondition.NEVER) {
    return tryInterrupt();
  }
  boolean hasBookLink=false;
  for (  ATOMLink link : entry.Links) {
    final String type=link.getType();
    final String rel=opdsLink.relation(link.getRel(),type);
    if ((rel != null && rel.startsWith(OPDSConstants.REL_ACQUISITION_PREFIX)) || (rel == null && formatByMimeType(type) != BookReference.Format.NONE)) {
      hasBookLink=true;
      break;
    }
  }
  NetworkLibraryItem item;
  if (hasBookLink) {
    item=readBookItem(entry);
  }
 else {
    item=readCatalogItem(entry);
  }
  if (item != null) {
    myData.Listener.onNewItem(myData.Link,item);
  }
  return tryInterrupt();
}
