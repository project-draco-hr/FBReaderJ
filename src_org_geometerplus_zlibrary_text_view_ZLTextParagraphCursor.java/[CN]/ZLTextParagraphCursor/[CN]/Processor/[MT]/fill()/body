{
  int hyperlinkDepth=0;
  ZLTextHyperlink hyperlink=null;
  final ArrayList<ZLTextElement> elements=myElements;
  for (ZLTextParagraph.EntryIterator it=myParagraph.iterator(); it.hasNext(); ) {
    it.next();
switch (it.getType()) {
case ZLTextParagraph.Entry.TEXT:
      processTextEntry(it.getTextData(),it.getTextOffset(),it.getTextLength(),hyperlink);
    break;
case ZLTextParagraph.Entry.CONTROL:
  if (hyperlink != null) {
    hyperlinkDepth+=it.getControlIsStart() ? 1 : -1;
    if (hyperlinkDepth == 0) {
      hyperlink=null;
    }
  }
elements.add(ZLTextControlElement.get(it.getControlKind(),it.getControlIsStart()));
break;
case ZLTextParagraph.Entry.HYPERLINK_CONTROL:
{
final byte hyperlinkType=it.getHyperlinkType();
if (hyperlinkType != 0) {
final ZLTextHyperlinkControlElement control=new ZLTextHyperlinkControlElement(it.getControlKind(),hyperlinkType,it.getHyperlinkId());
elements.add(control);
hyperlink=control.Hyperlink;
hyperlinkDepth=1;
}
break;
}
case ZLTextParagraph.Entry.IMAGE:
final ZLImageEntry imageEntry=it.getImageEntry();
final ZLImage image=imageEntry.getImage();
if (image != null) {
ZLImageData data=ZLImageManager.Instance().getImageData(image);
if (data != null) {
if (hyperlink != null) {
hyperlink.addElementIndex(elements.size());
}
elements.add(new ZLTextImageElement(imageEntry.Id,data,image.getURI(),imageEntry.IsCover));
}
}
break;
case ZLTextParagraph.Entry.STYLE_CSS:
case ZLTextParagraph.Entry.STYLE_OTHER:
elements.add(new ZLTextStyleElement(it.getStyleEntry()));
break;
case ZLTextParagraph.Entry.STYLE_CLOSE:
elements.add(ZLTextElement.StyleClose);
break;
case ZLTextParagraph.Entry.FIXED_HSPACE:
elements.add(ZLTextFixedHSpaceElement.getElement(it.getFixedHSpaceLength()));
break;
}
}
}
