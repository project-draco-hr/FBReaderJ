{
  if (nameInfo == null || nameInfo.Offset < myPosition || nameInfo.Length <= 0) {
    return null;
  }
  byte[] buffer;
  try {
    buffer=readTable(stream,nameInfo);
  }
 catch (  Throwable e) {
    return null;
  }
  if (getInt16(buffer,0) != 0) {
    throw new IOException("Name table format is invalid");
  }
  final int count=Math.min(getInt16(buffer,2),(buffer.length - 6) / 12);
  final int stringOffset=getInt16(buffer,4);
  String family=null;
  String subfamily=null;
  for (int i=0; i < count; ++i) {
    final int platformId=getInt16(buffer,12 * i + 6);
    final int languageId=getInt16(buffer,12 * i + 10);
    final int nameId=getInt16(buffer,12 * i + 12);
    final int length=getInt16(buffer,12 * i + 14);
    final int offset=getInt16(buffer,12 * i + 16);
    System.err.println(nameId + ": " + new String(buffer,stringOffset + offset,length,platformId == 1 ? "ISO-8859-1" : "UTF-16BE"));
switch (nameId) {
case 1:
      if ((family == null || languageId == 1033) && stringOffset + offset + length <= buffer.length) {
        family=new String(buffer,stringOffset + offset,length,platformId == 1 ? "ISO-8859-1" : "UTF-16BE");
      }
    break;
case 2:
  if ((subfamily == null || languageId == 1033) && stringOffset + offset + length <= buffer.length) {
    subfamily=new String(buffer,stringOffset + offset,length,platformId == 1 ? "ISO-8859-1" : "UTF-16BE");
  }
break;
}
}
return family != null ? new ZLTTFInfo(family,subfamily) : null;
}
