{
  final HashMap<String,File[]> fonts=new HashMap<String,File[]>();
  if (files == null) {
    return fonts;
  }
  for (  File f : files) {
    InputStream stream=null;
    try {
      stream=new FileInputStream(f);
      final ZLTTFInfo info=detectInfo(stream);
      if (info != null && info.FamilyName != null) {
        String familyName=info.FamilyName;
        String subfamilyName=info.SubFamilyName;
        if (subfamilyName == null || !STYLES.contains(subfamilyName.toLowerCase())) {
          final String full=subfamilyName != null ? familyName + " " + subfamilyName : familyName;
          final String lower=full.toLowerCase();
          familyName=full;
          subfamilyName="";
          for (          String style : STYLES) {
            if (lower.endsWith(" " + style)) {
              familyName=full.substring(0,lower.length() - style.length() - 1);
              subfamilyName=full.substring(lower.length() - style.length());
              break;
            }
          }
        }
        File[] table=fonts.get(familyName);
        if (table == null) {
          table=new File[4];
          fonts.put(familyName,table);
        }
        if ("bold".equalsIgnoreCase(subfamilyName)) {
          table[1]=f;
        }
 else         if ("italic".equalsIgnoreCase(subfamilyName) || "oblique".equalsIgnoreCase(subfamilyName)) {
          table[2]=f;
        }
 else         if ("bold italic".equalsIgnoreCase(subfamilyName) || "bold oblique".equalsIgnoreCase(subfamilyName)) {
          table[3]=f;
        }
 else {
          table[0]=f;
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      if (stream != null) {
        try {
          stream.close();
        }
 catch (        IOException e1) {
        }
      }
    }
  }
  return fonts;
}
