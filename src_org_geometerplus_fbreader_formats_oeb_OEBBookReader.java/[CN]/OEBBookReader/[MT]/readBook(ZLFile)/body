{
  myFilePrefix=MiscUtil.htmlDirectoryPrefix(file);
  myIdToHref.clear();
  myHtmlFileNames.clear();
  myNCXTOCFileName=null;
  myTourTOC.clear();
  myGuideTOC.clear();
  myState=READ_NONE;
  try {
    read(file);
  }
 catch (  IOException e) {
    throw new BookReadingException(e,file);
  }
  myModelReader.setMainTextModel();
  myModelReader.pushKind(FBTextKind.REGULAR);
  int count=0;
  for (  String name : myHtmlFileNames) {
    final ZLFile xhtmlFile=ZLFile.createFileByPath(myFilePrefix + name);
    if (xhtmlFile == null) {
      throw new BookReadingException("fileNotFound",myFilePrefix + name,file);
    }
    if (count++ == 0 && xhtmlFile.getPath().equals(myCoverFileName)) {
      continue;
    }
    final XHTMLReader reader=new XHTMLReader(myModelReader,myFileNumbers);
    final String referenceName=reader.getFileAlias(MiscUtil.archiveEntryName(xhtmlFile.getPath()));
    myModelReader.addHyperlinkLabel(referenceName);
    myTOCLabels.put(referenceName,myModelReader.Model.BookTextModel.getParagraphsNumber());
    try {
      reader.readFile(xhtmlFile,referenceName + '#');
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    myModelReader.insertEndOfSectionParagraph();
  }
  generateTOC();
}
