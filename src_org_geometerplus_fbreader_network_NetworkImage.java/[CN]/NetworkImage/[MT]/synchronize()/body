{
  if (mySynchronized) {
    return;
  }
  try {
    final String fileName=getFileName();
    if (fileName == null) {
      return;
    }
    final int index=fileName.lastIndexOf(File.separator);
    if (index != -1) {
      final String dir=fileName.substring(0,index);
      final File dirFile=new File(dir);
      if (!dirFile.exists() && !dirFile.mkdirs()) {
        return;
      }
      if (!dirFile.exists() || !dirFile.isDirectory()) {
        return;
      }
    }
    final File imageFile=new File(fileName);
    if (imageFile.exists()) {
      final long diff=System.currentTimeMillis() - imageFile.lastModified();
      final long valid=7 * 24 * 60* 60* 1000;
      if (diff >= 0 && diff <= valid) {
        return;
      }
      imageFile.delete();
    }
    try {
      final URL url=new URL(myUrl);
      final URLConnection connection=url.openConnection();
      if (!(connection instanceof HttpURLConnection)) {
        return;
      }
      final HttpURLConnection httpConnection=(HttpURLConnection)connection;
      httpConnection.setConnectTimeout(15000);
      httpConnection.setReadTimeout(30000);
      httpConnection.setRequestProperty("Connection","Close");
      httpConnection.setRequestProperty("User-Agent",ZLNetworkUtil.getUserAgent());
      final int response=httpConnection.getResponseCode();
      if (response == HttpURLConnection.HTTP_OK) {
        OutputStream outStream=new FileOutputStream(imageFile);
        try {
          InputStream inStream=httpConnection.getInputStream();
          final byte[] buffer=new byte[8192];
          while (true) {
            final int size=inStream.read(buffer);
            if (size <= 0) {
              break;
            }
            outStream.write(buffer,0,size);
          }
          inStream.close();
        }
  finally {
          outStream.close();
        }
      }
    }
 catch (    MalformedURLException e) {
    }
catch (    IOException e) {
    }
  }
  finally {
    mySynchronized=true;
  }
}
