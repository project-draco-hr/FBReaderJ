{
  String id=attributes.getValue("id");
  if (id != null) {
    if (!myReadMainText) {
      setFootnoteTextModel(id);
    }
    addHyperlinkLabel(id);
  }
switch (HtmlTag.getTagByName(tagName)) {
case HtmlTag.HTML:
    final int attibutesNumber=attributes.getSize();
  for (int i=0; i < attibutesNumber; ++i) {
    final String key=attributes.getKey(i);
    if (key.startsWith("xmlns:")) {
      final String value=attributes.getValue(key);
      if (value.endsWith("/xlink")) {
        myHrefAttribute=(key.substring(6) + "href").intern();
        break;
      }
    }
  }
break;
case HtmlTag.BODY:
++myBodyCounter;
if ((myBodyCounter == 1) || (attributes.getValue("name") == null)) {
setMainTextModel();
myReadMainText=true;
}
pushKind(FBTextKind.REGULAR);
beginParagraph(ZLTextParagraph.Kind.TEXT_PARAGRAPH);
break;
case HtmlTag.P:
if (mySectionStarted) {
mySectionStarted=false;
}
 else if (myInsideTitle) {
addContentsData(SPACE);
}
beginParagraph(ZLTextParagraph.Kind.TEXT_PARAGRAPH);
break;
case HtmlTag.A:
{
String ref=attributes.getValue(myHrefAttribute);
if ((ref != null) && (ref.length() != 0)) {
if (ref.charAt(0) == '#') {
myHyperlinkType=FBTextKind.FOOTNOTE;
ref=ref.substring(1);
}
 else {
myHyperlinkType=FBTextKind.EXTERNAL_HYPERLINK;
}
addHyperlinkControl(myHyperlinkType,ref);
myControls[myControlsNumber]=myHyperlinkType;
myControlsNumber++;
}
 else {
}
break;
}
case HtmlTag.IMG:
{
String ref=attributes.getValue(mySrcAttribute);
if ((ref != null) && (ref.length() != 0)) {
addImageReference(ref,(short)0);
if (":\\".equals(ref.substring(1,3))) {
addImage(ref,new ZLFileImage("image/auto",ref,0));
}
 else {
String fileName=Model.Description.FileName;
addImage(ref,new ZLFileImage("image/auto",fileName.substring(0,fileName.lastIndexOf('\\') + 1) + ref,0));
}
}
break;
}
case HtmlTag.B:
openControl(FBTextKind.BOLD);
break;
case HtmlTag.S:
openControl(FBTextKind.STRIKETHROUGH);
break;
case HtmlTag.SUB:
openControl(FBTextKind.SUB);
break;
case HtmlTag.SUP:
openControl(FBTextKind.SUP);
break;
case HtmlTag.PRE:
openControl(FBTextKind.PREFORMATTED);
break;
case HtmlTag.STRONG:
openControl(FBTextKind.STRONG);
break;
case HtmlTag.CODE:
openControl(FBTextKind.CODE);
break;
case HtmlTag.EM:
openControl(FBTextKind.EMPHASIS);
break;
case HtmlTag.CITE:
openControl(FBTextKind.CITE);
break;
case HtmlTag.DFN:
openControl(FBTextKind.DEFINITION);
break;
case HtmlTag.I:
openControl(FBTextKind.ITALIC);
break;
case HtmlTag.H1:
startNewParagraph();
openControl(FBTextKind.H1);
break;
case HtmlTag.H2:
startNewParagraph();
openControl(FBTextKind.H2);
break;
case HtmlTag.H3:
startNewParagraph();
openControl(FBTextKind.H3);
break;
case HtmlTag.H4:
startNewParagraph();
openControl(FBTextKind.H4);
break;
case HtmlTag.H5:
startNewParagraph();
openControl(FBTextKind.H5);
break;
case HtmlTag.H6:
startNewParagraph();
openControl(FBTextKind.H6);
break;
case HtmlTag.OL:
myOrderedListIsStarted=true;
break;
case HtmlTag.UL:
myUnorderedListIsStarted=true;
break;
case HtmlTag.LI:
startNewParagraph();
if (myOrderedListIsStarted) {
char[] number=(new Integer(++myOLCounter)).toString().toCharArray();
addDataFinal(number,0,number.length);
addDataFinal(new char[]{'.',' '},0,2);
}
 else {
addDataFinal(new char[]{'*',' '},0,2);
}
break;
case HtmlTag.SCRIPT:
case HtmlTag.SELECT:
case HtmlTag.STYLE:
endParagraph();
break;
case HtmlTag.TR:
case HtmlTag.BR:
startNewParagraph();
break;
default :
break;
}
}
