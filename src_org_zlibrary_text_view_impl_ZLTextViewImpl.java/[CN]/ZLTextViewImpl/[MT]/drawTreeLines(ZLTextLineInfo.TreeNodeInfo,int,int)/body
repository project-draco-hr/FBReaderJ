{
  final ZLPaintContext context=getContext();
  context.setColor(ZLTextStyleCollection.getInstance().getBaseStyle().TreeLinesColorOption.getValue());
  int x=context.getX();
  int y=context.getY();
  final int qstep=(context.getStringHeight() + 2) / 3;
  final boolean[] stack=info.VerticalLinesStack;
  final int depth=stack.length;
  for (int i=depth - 1; i >= 0; --i) {
    if (stack[i]) {
      context.drawLine(x + 2 * qstep,y + vSpaceAfter,x + 2 * qstep,y - height + 1);
    }
    x+=4 * qstep;
  }
  if (info.IsFirstLine) {
    if ((depth > 0) && !stack[0]) {
      context.drawLine(x - 2 * qstep,y - qstep,x - 2 * qstep,y - height + 1);
    }
    if (info.IsLeaf) {
      if (depth > 0) {
        context.drawLine(x - 2 * qstep,y - qstep,x + 3 * qstep,y - qstep);
      }
    }
 else {
      int space=Math.max(qstep * 2 / 5,2);
      if (depth > 0) {
        context.drawLine(x - 2 * qstep,y - qstep,x + qstep,y - qstep);
      }
      final int x0=x + qstep;
      final int x1=x + 3 * qstep;
      final int y0=y;
      final int y1=y - 2 * qstep;
      context.drawLine(x0,y0,x0,y1);
      context.drawLine(x1,y0,x1,y1);
      context.drawLine(x0,y0,x1,y0);
      context.drawLine(x0,y1,x1,y1);
      context.drawLine(x0 + space,y - qstep,x1 - space,y - qstep);
      if (info.IsOpen) {
        context.drawLine(x + 2 * qstep,y + vSpaceAfter,x + 2 * qstep,y);
      }
 else {
        context.drawLine(x + 2 * qstep,y0 - space,x + 2 * qstep,y1 + space);
      }
      myTreeNodeMap.add(new ZLTextTreeNodeArea(info.ParagraphNumber,x,x + 4 * qstep,y - height + 1,y));
    }
  }
 else   if (!info.IsLeaf && info.IsOpen) {
    context.drawLine(x + 2 * qstep,y + vSpaceAfter,x + 2 * qstep,y - height + 1);
  }
}
