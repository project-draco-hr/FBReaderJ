{
  int newWidth=getViewWidth();
  int newHeight=getTextAreaHeight();
  if ((newWidth != myOldWidth) || (newHeight != myOldHeight)) {
    myOldWidth=newWidth;
    myOldHeight=newHeight;
    rebuildPaintInfo(false);
  }
  if ((myPaintState == PaintState.NOTHING_TO_PAINT) || (myPaintState == PaintState.READY)) {
    return;
  }
  final ZLTextLineInfoVector infos=myLineInfos;
  final int infosSize=infos.size();
  final ZLTextLineInfoCache cache=myLineInfoCache;
  for (int i=0; i < infosSize; ++i) {
    cache.put(infos.getInfo(i));
  }
switch (myPaintState) {
default :
    break;
case PaintState.TO_SCROLL_FORWARD:
  if (!myEndCursor.getParagraphCursor().isLast() || !myEndCursor.isEndOfParagraph()) {
    final ZLTextWordCursor startCursor=new ZLTextWordCursor();
switch (myScrollingMode) {
case ScrollingMode.NO_OVERLAPPING:
      break;
case ScrollingMode.KEEP_LINES:
    findLineFromEnd(startCursor,myOverlappingValue);
  break;
case ScrollingMode.SCROLL_LINES:
findLineFromStart(startCursor,myOverlappingValue);
if (startCursor.isEndOfParagraph()) {
startCursor.nextParagraph();
}
break;
case ScrollingMode.SCROLL_PERCENTAGE:
findPercentFromStart(startCursor,myOverlappingValue);
break;
}
if (!startCursor.isNull() && startCursor.equalsToCursor(myStartCursor)) {
findLineFromStart(startCursor,1);
}
if (!startCursor.isNull()) {
final ZLTextWordCursor endCursor=new ZLTextWordCursor();
buildInfos(startCursor,endCursor);
if (!pageIsEmpty() && ((myScrollingMode != ScrollingMode.KEEP_LINES) || (!endCursor.equalsToCursor(myEndCursor)))) {
myStartCursor.setCursor(startCursor);
myEndCursor.setCursor(endCursor);
break;
}
}
myStartCursor.setCursor(myEndCursor);
buildInfos(myStartCursor,myEndCursor);
}
break;
case PaintState.TO_SCROLL_BACKWARD:
if (!myStartCursor.getParagraphCursor().isFirst() || !myStartCursor.isStartOfParagraph()) {
switch (myScrollingMode) {
case ScrollingMode.NO_OVERLAPPING:
myStartCursor.setCursor(findStart(myStartCursor,SizeUnit.PIXEL_UNIT,getTextAreaHeight()));
break;
case ScrollingMode.KEEP_LINES:
{
ZLTextWordCursor endCursor=new ZLTextWordCursor();
findLineFromStart(endCursor,myOverlappingValue);
if (!endCursor.isNull() && endCursor.equalsToCursor(myEndCursor)) {
findLineFromEnd(endCursor,1);
}
if (!endCursor.isNull()) {
ZLTextWordCursor startCursor=findStart(endCursor,SizeUnit.PIXEL_UNIT,getTextAreaHeight());
if (startCursor.equalsToCursor(myStartCursor)) {
myStartCursor.setCursor(findStart(myStartCursor,SizeUnit.PIXEL_UNIT,getTextAreaHeight()));
}
 else {
myStartCursor.setCursor(startCursor);
}
}
 else {
myStartCursor.setCursor(findStart(myStartCursor,SizeUnit.PIXEL_UNIT,getTextAreaHeight()));
}
break;
}
case ScrollingMode.SCROLL_LINES:
myStartCursor.setCursor(findStart(myStartCursor,SizeUnit.LINE_UNIT,myOverlappingValue));
break;
case ScrollingMode.SCROLL_PERCENTAGE:
myStartCursor.setCursor(findStart(myStartCursor,SizeUnit.PIXEL_UNIT,getTextAreaHeight() * myOverlappingValue / 100));
break;
}
buildInfos(myStartCursor,myEndCursor);
if (pageIsEmpty()) {
myStartCursor.setCursor(findStart(myStartCursor,SizeUnit.LINE_UNIT,1));
buildInfos(myStartCursor,myEndCursor);
}
}
break;
case PaintState.START_IS_KNOWN:
buildInfos(myStartCursor,myEndCursor);
break;
case PaintState.END_IS_KNOWN:
myStartCursor.setCursor(findStart(myEndCursor,SizeUnit.PIXEL_UNIT,getTextAreaHeight()));
buildInfos(myStartCursor,myEndCursor);
break;
}
myPaintState=PaintState.READY;
myLineInfoCache.clear();
}
