{
  final ZLPaintContext context=getContext();
  final ZLTextParagraphCursor paragraphCursor=info.ParagraphCursor;
  setTextStyle(info.StartStyle);
  final int y=Math.min(context.getY() + info.Height,getTextAreaHeight() + getTopMargin());
  int spaceCounter=info.SpaceCounter;
  int fullCorrection=0;
  final boolean endOfParagraph=info.isEndOfParagraph();
  boolean wordOccurred=false;
  boolean changeStyle=true;
  context.moveXTo(getLeftMargin() + info.LeftIndent);
  final int maxWidth=context.getWidth() - getLeftMargin() - getRightMargin();
switch (myTextStyle.getAlignment()) {
case ZLTextAlignmentType.ALIGN_RIGHT:
{
      context.moveX(maxWidth - myTextStyle.getRightIndent() - info.Width);
      break;
    }
case ZLTextAlignmentType.ALIGN_CENTER:
{
    context.moveX((maxWidth - myTextStyle.getRightIndent() - info.Width) / 2);
    break;
  }
case ZLTextAlignmentType.ALIGN_JUSTIFY:
{
  if (!endOfParagraph && (paragraphCursor.getElement(info.EndWordNumber) != ZLTextElement.AfterParagraph)) {
    fullCorrection=maxWidth - myTextStyle.getRightIndent() - info.Width;
  }
  break;
}
case ZLTextAlignmentType.ALIGN_LEFT:
case ZLTextAlignmentType.ALIGN_UNDEFINED:
{
break;
}
}
final ZLTextParagraphCursor paragraph=info.ParagraphCursor;
int paragraphNumber=paragraph.getIndex();
final int endWordNumber=info.EndWordNumber;
int charNumber=info.RealStartCharNumber;
for (int wordNumber=info.RealStartWordNumber; wordNumber != endWordNumber; ++wordNumber, charNumber=0) {
final ZLTextElement element=paragraph.getElement(wordNumber);
final int x=context.getX();
final int width=getElementWidth(element,charNumber);
if (element == ZLTextElement.HSpace) {
if (wordOccurred && (spaceCounter > 0)) {
int correction=fullCorrection / spaceCounter;
context.moveX(context.getSpaceWidth() + correction);
fullCorrection-=correction;
wordOccurred=false;
--spaceCounter;
}
}
 else if ((element instanceof ZLTextWord) || (element instanceof ZLTextImageElement)) {
final int height=getElementHeight(element);
final int descent=getElementDescent(element);
final int length=(element instanceof ZLTextWord) ? ((ZLTextWord)element).Length : 0;
myTextElementMap.add(new ZLTextElementArea(paragraphNumber,wordNumber,charNumber,length,false,changeStyle,myTextStyle,element,x,x + width - 1,y - height + 1,y + descent));
changeStyle=false;
wordOccurred=true;
}
 else if (element instanceof ZLTextControlElement) {
applyControl((ZLTextControlElement)element);
changeStyle=true;
}
context.moveX(width);
}
if (!endOfParagraph && (paragraph.getElement(info.EndWordNumber) instanceof ZLTextWord)) {
int len=info.EndCharNumber;
if (len > 0) {
final ZLTextWord word=(ZLTextWord)paragraph.getElement(info.EndWordNumber);
final boolean addHyphenationSign=word.Data[len - 1] != '-';
final int x=context.getX();
final int width=getWordWidth(word,0,len,addHyphenationSign);
final int height=getElementHeight(word);
final int descent=getElementDescent(word);
myTextElementMap.add(new ZLTextElementArea(paragraphNumber,info.EndWordNumber,0,len,addHyphenationSign,changeStyle,myTextStyle,paragraph.getElement(info.EndWordNumber),x,x + width - 1,y - height + 1,y + descent));
}
}
context.moveY(info.Height + info.Descent + info.VSpaceAfter);
}
