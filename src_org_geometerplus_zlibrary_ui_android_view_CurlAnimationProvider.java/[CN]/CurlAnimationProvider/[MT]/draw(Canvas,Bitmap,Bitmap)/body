{
  canvas.drawBitmap(bgBitmap,0,0,myPaint);
  final int cornerX=myStartX > myWidth / 2 ? myWidth : 0;
  final int cornerY=myStartY > myHeight / 2 ? myHeight : 0;
  final int oppositeX=Math.abs(myWidth - cornerX);
  final int oppositeY=Math.abs(myHeight - cornerY);
  final int x, y;
  if (myHorizontal) {
    x=Math.max(1,Math.min(myWidth - 1,myEndX));
    if (cornerY == 0) {
      y=Math.max(1,Math.min(myHeight / 2,myEndY));
    }
 else {
      y=Math.max(myHeight / 2,Math.min(myHeight - 1,myEndY));
    }
  }
 else {
    y=Math.max(1,Math.min(myHeight - 1,myEndY));
    if (cornerX == 0) {
      x=Math.max(1,Math.min(myWidth / 2,myEndX));
    }
 else {
      x=Math.max(myWidth / 2,Math.min(myWidth - 1,myEndX));
    }
  }
  final int dX=Math.abs(x - cornerX);
  final int dY=Math.abs(y - cornerY);
  final int x1=cornerX == 0 ? (dY * dY / dX + dX) / 2 : cornerX - (dY * dY / dX + dX) / 2;
  final int y1=cornerY == 0 ? (dX * dX / dY + dY) / 2 : cornerY - (dX * dX / dY + dY) / 2;
  final Path fgPath=new Path();
  fgPath.moveTo(x1,cornerY);
  fgPath.lineTo(x,y);
  fgPath.lineTo(cornerX,y1);
  fgPath.lineTo(cornerX,oppositeY);
  fgPath.lineTo(oppositeX,oppositeY);
  fgPath.lineTo(oppositeX,cornerY);
  canvas.clipPath(fgPath);
  canvas.drawBitmap(fgBitmap,0,0,myPaint);
  canvas.restore();
  myEdgePaint.setColor(ZLAndroidPaintContext.getFillColor());
  myEdgePaint.setAntiAlias(true);
  myEdgePaint.setStyle(Paint.Style.FILL);
  myEdgePaint.setShadowLayer(25,5,5,0x99000000);
  final Path path=new Path();
  path.moveTo(x1,cornerY);
  path.lineTo(x,y);
  path.lineTo(cornerX,y1);
  canvas.drawPath(path,myEdgePaint);
}
