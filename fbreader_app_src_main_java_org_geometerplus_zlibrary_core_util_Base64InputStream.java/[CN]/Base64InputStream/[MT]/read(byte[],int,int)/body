{
  if (len == 0) {
    return 0;
  }
  int ready=0;
  if (myDecoded0 != -1) {
    b[off]=(byte)myDecoded0;
    myDecoded0=-1;
    if (len == 1) {
      return 1;
    }
    b[off + 1]=(byte)myDecoded1;
    myDecoded1=-1;
    if (len == 2) {
      return 2;
    }
    b[off + 2]=(byte)myDecoded2;
    myDecoded2=-1;
    ready=3;
  }
 else   if (myDecoded1 != -1) {
    b[off]=(byte)myDecoded1;
    myDecoded1=-1;
    if (len == 1) {
      return 1;
    }
    b[off + 1]=(byte)myDecoded2;
    myDecoded2=-1;
    ready=2;
  }
 else   if (myDecoded2 != -1) {
    b[off]=(byte)myDecoded2;
    myDecoded2=-1;
    ready=1;
  }
  for (; ready < len - 2; ready+=3) {
    int first=-1;
    int second=-1;
    int third=-1;
    int fourth=-1;
    main:     while (myBufferLength >= 0) {
      while (myBufferLength-- > 0) {
        final int digit=decode(myBuffer[myBufferOffset++]);
        if (digit != -1) {
          if (first == -1) {
            first=digit;
          }
 else           if (second == -1) {
            second=digit;
          }
 else           if (third == -1) {
            third=digit;
          }
 else {
            fourth=digit;
            break main;
          }
        }
      }
      fillBuffer();
    }
    if (first == -1) {
      return ready > 0 ? ready : -1;
    }
    b[off + ready]=(byte)((first << 2) | (second >> 4));
    b[off + ready + 1]=(byte)((second << 4) | (third >> 2));
    b[off + ready + 2]=(byte)((third << 6) | fourth);
  }
  fillDecodedBuffer();
  for (; ready < len; ++ready) {
    final int num=read();
    if (num == -1) {
      return ready > 0 ? ready : -1;
    }
    b[off + ready]=(byte)num;
  }
  return len;
}
