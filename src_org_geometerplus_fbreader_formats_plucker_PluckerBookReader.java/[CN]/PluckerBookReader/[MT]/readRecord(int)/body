{
  int uid=PdbUtil.readShort(myStream);
  if (uid == 1) {
    myCompressionVersion=(short)PdbUtil.readShort(myStream);
  }
 else {
    int paragraphs=PdbUtil.readShort(myStream);
    int size=PdbUtil.readShort(myStream);
    int type=myStream.read();
    int flags=myStream.read();
switch (type) {
case 0:
case 1:
{
        ArrayList pars=new ArrayList();
        for (int i=0; i < paragraphs; ++i) {
          int pSize=PdbUtil.readShort(myStream);
          pars.add(pSize);
          myStream.skip(2);
        }
        boolean doProcess=false;
        if (type == 0) {
          byte[] buf=new byte[size];
          doProcess=myStream.read(buf,0,(int)size) == size;
          if (doProcess) {
            myCharBuffer=new String(buf).toCharArray();
          }
        }
 else         if (myCompressionVersion == 1) {
          byte[] buf=new byte[size];
          doProcess=DocDecompressor.decompress(myStream,buf,recordSize - 8 - 4 * paragraphs) == size;
          if (doProcess) {
            myCharBuffer=new String(buf).toCharArray();
          }
        }
 else         if (myCompressionVersion == 2) {
          byte input[]=new byte[(int)(recordSize - 10 - 4 * paragraphs)];
          final int inputSize=myStream.read(input);
          Inflater decompressor=new Inflater();
          decompressor.setInput(input,0,inputSize);
          byte output[]=new byte[size];
          try {
            doProcess=decompressor.inflate(output) == size;
            decompressor.end();
            myCharBuffer=new String(output,0,size).toCharArray();
          }
 catch (          DataFormatException e) {
          }
        }
        if (doProcess) {
          addHyperlinkLabel(fromNumber(uid));
          myParagraphMap.put(uid,new ArrayList());
          myParagraphVector=(ArrayList)myParagraphMap.get(uid);
          processTextRecord(size,pars);
          if ((flags & 0x1) == 0) {
          }
        }
        break;
      }
case 2:
case 3:
{
      final String mime="image/palm";
      ZLImage image=null;
      if (type == 2) {
        image=new PluckerFileImage(mime,myFile,myStream.offset(),recordSize - 8);
      }
 else       if (myCompressionVersion == 1) {
        image=new DocCompressedFileImage(mime,myFile,myStream.offset(),recordSize - 8);
      }
 else       if (myCompressionVersion == 2) {
        image=new ZCompressedFileImage(mime,myFile,myStream.offset() + 2,recordSize - 10);
      }
      if (image != null) {
        addImage(fromNumber(uid),image);
      }
      break;
    }
case 9:
  break;
case 10:
short typeCode=(short)PdbUtil.readShort(myStream);
break;
case 11:
break;
case 12:
break;
case 13:
case 14:
break;
case 15:
{
short columns=(short)PdbUtil.readShort(myStream);
short rows=(short)PdbUtil.readShort(myStream);
break;
}
default :
break;
}
}
}
