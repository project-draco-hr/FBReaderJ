{
  if (mySelectedBook == null) {
    return false;
  }
  if (tree instanceof BookTree) {
    return mySelectedBook.equals(((BookTree)tree).Book);
  }
 else   if (tree instanceof AuthorTree) {
    return mySelectedBook.authors().contains(((AuthorTree)tree).Author);
  }
 else   if (tree instanceof TitleTree) {
    final String title=mySelectedBook.getTitle();
    return tree != null && title.trim().startsWith(((TitleTree)tree).Title);
  }
 else   if (tree instanceof SeriesTree) {
    final SeriesInfo info=mySelectedBook.getSeriesInfo();
    final String series=((SeriesTree)tree).Series;
    return info != null && series != null && series.equals(info.Name);
  }
 else   if (tree instanceof TagTree) {
    final Tag tag=((TagTree)tree).Tag;
    for (    Tag t : mySelectedBook.tags()) {
      for (; t != null; t=t.Parent) {
        if (t == tag) {
          return true;
        }
      }
    }
  }
 else   if (tree instanceof FileTree) {
    final FileTree fileTree=(FileTree)tree;
    if (!fileTree.isSelectable()) {
      return false;
    }
    final ZLFile file=fileTree.getFile();
    final String path=file.getPath();
    if (mySelectedBookPath.equals(path)) {
      return true;
    }
    String prefix=path;
    if (file.isDirectory()) {
      if (!prefix.endsWith("/")) {
        prefix+='/';
      }
    }
 else     if (file.isArchive()) {
      prefix+=':';
    }
 else {
      return false;
    }
    return mySelectedBookPath.startsWith(prefix);
  }
  return false;
}
