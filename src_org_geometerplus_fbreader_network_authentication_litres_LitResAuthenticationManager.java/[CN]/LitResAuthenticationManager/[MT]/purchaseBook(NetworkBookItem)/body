{
  final String sid;
synchronized (this) {
    sid=mySidOption.getValue();
  }
  if (sid.length() == 0) {
    throw new ZLNetworkAuthenticationException();
  }
  final BookUrlInfo reference=book.reference(UrlInfo.Type.BookBuy);
  if (reference == null) {
    throw ZLNetworkException.forCode(NetworkException.ERROR_BOOK_NOT_PURCHASED);
  }
  final LitResPurchaseXMLReader xmlReader=new LitResPurchaseXMLReader(Link.getSiteName());
  ZLNetworkException exception=null;
  try {
    final LitResNetworkRequest request=new LitResNetworkRequest(reference.Url,xmlReader);
    request.addPostParameter("sid",sid);
    myNetworkContext.perform(request);
  }
 catch (  ZLNetworkException e) {
    exception=e;
  }
synchronized (this) {
    if (xmlReader.Account != null) {
      myAccount=new Money(xmlReader.Account,"RUB");
    }
    if (exception != null) {
      if (exception instanceof ZLNetworkAuthenticationException) {
        logOut(false);
      }
 else       if (exception instanceof AlreadyPurchasedException) {
        myPurchasedBooks.addToStart(book);
      }
      throw exception;
    }
    if (xmlReader.BookId == null || !xmlReader.BookId.equals(book.Id)) {
      throw ZLNetworkException.forCode(NetworkException.ERROR_SOMETHING_WRONG,Link.getSiteName());
    }
    myPurchasedBooks.addToStart(book);
    final BasketItem basket=book.Link.getBasketItem();
    if (basket != null) {
      basket.remove(book);
    }
  }
}
