{
  final String sid;
synchronized (this) {
    sid=mySidOption.getValue();
  }
  if (sid.length() == 0) {
    return NetworkErrors.errorMessage(NetworkErrors.ERROR_AUTHENTICATION_FAILED);
  }
  BookReference reference=book.reference(BookReference.Type.BUY);
  if (reference == null) {
    return NetworkErrors.errorMessage(NetworkErrors.ERROR_BOOK_NOT_PURCHASED);
  }
  String query=reference.URL;
  query=ZLNetworkUtil.appendParameter(query,"sid",sid);
  final LitResPurchaseXMLReader xmlReader=new LitResPurchaseXMLReader(Link.getSiteName());
  final String error=ZLNetworkManager.Instance().perform(new LitResNetworkRequest(query,SSLCertificate,xmlReader));
synchronized (this) {
    if (xmlReader.Account != null) {
      myAccount=BuyBookReference.price(xmlReader.Account,"RUB");
    }
    final String authenticationError=NetworkErrors.errorMessage(NetworkErrors.ERROR_AUTHENTICATION_FAILED);
    if (authenticationError.equals(error)) {
      mySidChecked=true;
      mySidUserNameOption.setValue("");
      mySidOption.setValue("");
    }
    final String alreadyPurchasedError=NetworkErrors.errorMessage(NetworkErrors.ERROR_PURCHASE_ALREADY_PURCHASED);
    if (!alreadyPurchasedError.equals(error)) {
      if (error != null) {
        return error;
      }
      if (xmlReader.BookId == null || !xmlReader.BookId.equals(book.Id)) {
        return NetworkErrors.errorMessage(NetworkErrors.ERROR_SOMETHING_WRONG,Link.getSiteName());
      }
    }
    myPurchasedBooks.put(book.Id,book);
    return error;
  }
}
