{
  final File file=BookUtil.fileByBook(book).getPhysicalFile().javaFile();
  final String hash=myCollection.getHash(book,false);
  final boolean force=book.labels().contains(Book.SYNC_TOSYNC_LABEL);
  if (hash == null) {
    return Status.HashNotComputed;
  }
 else   if (myHashesFromServer.Actual.contains(hash)) {
    return Status.AlreadyUploaded;
  }
 else   if (!force && myHashesFromServer.Actual.contains(hash)) {
    return Status.ToBeDeleted;
  }
 else   if (!force && book.labels().contains(Book.SYNC_FAILURE_LABEL)) {
    return Status.FailedPreviuousTime;
  }
  if (file.length() > 120 * 1024 * 1024) {
    return Status.Failure;
  }
  initHashTables();
  final Map<String,Object> result=new HashMap<String,Object>();
  final PostRequest verificationRequest=new PostRequest("book.status.by.hash",Collections.singletonMap("sha1",hash)){
    @Override public void processResponse(    Object response){
      result.putAll((Map)response);
    }
  }
;
  try {
    myBookUploadContext.perform(verificationRequest);
  }
 catch (  ZLNetworkAuthenticationException e) {
    e.printStackTrace();
    return Status.AuthenticationError;
  }
catch (  ZLNetworkException e) {
    e.printStackTrace();
    return Status.ServerError;
  }
  final String csrfToken=myBookUploadContext.getCookieValue(SyncOptions.DOMAIN,"csrftoken");
  try {
    final String status=(String)result.get("status");
    if ((force && !"found".equals(status)) || "not found".equals(status)) {
      try {
        final UploadRequest uploadRequest=new UploadRequest(file,book,hash);
        uploadRequest.addHeader("Referer",verificationRequest.getURL());
        uploadRequest.addHeader("X-CSRFToken",csrfToken);
        myBookUploadContext.perform(uploadRequest);
        return uploadRequest.Result;
      }
 catch (      ZLNetworkAuthenticationException e) {
        e.printStackTrace();
        return Status.AuthenticationError;
      }
catch (      ZLNetworkException e) {
        e.printStackTrace();
        return Status.ServerError;
      }
    }
 else {
      final List<String> hashes=(List<String>)result.get("hashes");
      if ("found".equals(status)) {
        myHashesFromServer.addAll(hashes,null);
        return Status.AlreadyUploaded;
      }
 else {
        myHashesFromServer.addAll(null,hashes);
        return Status.ToBeDeleted;
      }
    }
  }
 catch (  Exception e) {
    log("UNEXPECTED RESPONSE: " + result);
    return Status.ServerError;
  }
}
