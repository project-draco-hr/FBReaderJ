{
  final ZLView view=ZLApplication.Instance().getCurrentView();
  final int w=getWidth();
  final int h=getMainAreaHeight();
  boolean doStopScrolling=false;
  if (myScrollingState == ScrollingState.AutoScrollingForward || myScrollingState == ScrollingState.AutoScrollingBackward) {
    if (myScrollHorizontally) {
      myEndX+=(int)myScrollingSpeed;
    }
 else {
      myEndY+=(int)myScrollingSpeed;
    }
    if (myScrollingSpeed > 0) {
      if (getAnimationProvider().getScrollingShift() >= myScrollingBound) {
        if (myScrollHorizontally) {
          myEndX=myStartX + myScrollingBound;
        }
 else {
          myEndY=myStartY + myScrollingBound;
        }
        doStopScrolling=true;
      }
    }
 else {
      if (getAnimationProvider().getScrollingShift() <= myScrollingBound) {
        if (myScrollHorizontally) {
          myEndX=myStartX + myScrollingBound;
        }
 else {
          myEndY=myStartY + myScrollingBound;
        }
        doStopScrolling=true;
      }
    }
    myScrollingSpeed*=1.5;
  }
  getAnimationProvider().setup(myStartX,myStartY,myEndX,myEndY,myScrollHorizontally);
  getAnimationProvider().draw(canvas,mySecondaryBitmap,myMainBitmap);
switch (view.getAnimationType()) {
case curl:
{
      if (doStopScrolling && myScrollingBound != 0) {
        break;
      }
      final int cornerX=myStartX > w / 2 ? w : 0;
      final int cornerY=myStartY > h / 2 ? h : 0;
      final int oppositeX=Math.abs(w - cornerX);
      final int oppositeY=Math.abs(h - cornerY);
      final int x, y;
      if (myScrollHorizontally) {
        x=Math.max(1,Math.min(w - 1,myEndX));
        if (cornerY == 0) {
          y=Math.max(1,Math.min(h / 2,myEndY));
        }
 else {
          y=Math.max(h / 2,Math.min(h - 1,myEndY));
        }
      }
 else {
        y=Math.max(1,Math.min(h - 1,myEndY));
        if (cornerX == 0) {
          x=Math.max(1,Math.min(w / 2,myEndX));
        }
 else {
          x=Math.max(w / 2,Math.min(w - 1,myEndX));
        }
      }
      final int dX=Math.abs(x - cornerX);
      final int dY=Math.abs(y - cornerY);
      final int x1=cornerX == 0 ? (dY * dY / dX + dX) / 2 : cornerX - (dY * dY / dX + dX) / 2;
      final int y1=cornerY == 0 ? (dX * dX / dY + dY) / 2 : cornerY - (dX * dX / dY + dY) / 2;
      final Path fgPath=new Path();
      fgPath.moveTo(x1,cornerY);
      fgPath.lineTo(x,y);
      fgPath.lineTo(cornerX,y1);
      fgPath.lineTo(cornerX,oppositeY);
      fgPath.lineTo(oppositeX,oppositeY);
      fgPath.lineTo(oppositeX,cornerY);
      canvas.clipPath(fgPath);
      canvas.drawBitmap(myMainBitmap,0,0,myPaint);
      canvas.restore();
      final int size=myScrollHorizontally ? w : h;
      int shift=getAnimationProvider().getScrollingShift() < 0 ? getAnimationProvider().getScrollingShift() + size : getAnimationProvider().getScrollingShift() - size;
      myEdgePaint.setColor(ZLAndroidPaintContext.getFillColor());
      myEdgePaint.setAntiAlias(true);
      myEdgePaint.setStyle(Paint.Style.FILL);
      myEdgePaint.setShadowLayer(25,5,5,0x99000000);
      final Path path=new Path();
      path.moveTo(x1,cornerY);
      path.lineTo(x,y);
      path.lineTo(cornerX,y1);
      canvas.drawPath(path,myEdgePaint);
      break;
    }
}
if (doStopScrolling) {
  if (myScrollingBound != 0) {
    Bitmap swap=myMainBitmap;
    myMainBitmap=mySecondaryBitmap;
    mySecondaryBitmap=swap;
    mySecondaryBitmapIsUpToDate=false;
    view.onScrollingFinished(myPageToScrollTo);
    ZLApplication.Instance().onRepaintFinished();
  }
 else {
    view.onScrollingFinished(ZLView.PageIndex.current);
  }
  setPageToScrollTo(ZLView.PageIndex.current);
  myScrollingState=ScrollingState.NoScrolling;
}
 else {
  if (myScrollingState == ScrollingState.AutoScrollingForward || myScrollingState == ScrollingState.AutoScrollingBackward) {
    postInvalidate();
  }
}
drawFooter(canvas);
}
