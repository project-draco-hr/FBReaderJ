{
  String tag=getCollectionModel().getTagByParagraphIndex(paragraphIndex);
  if (tag == null) {
    return;
  }
  final boolean tagIsSpecial=(tag == SpecialTagAllBooks) || (tag == SpecialTagNoTagsBooks);
  if (tagIsSpecial) {
    tag="";
  }
  final boolean editNotClone=tag != SpecialTagAllBooks;
  final boolean includeSubtags=!tagIsSpecial && Collection.hasSubtags(tag);
  final boolean hasBooks=Collection.hasBooks(tag);
  final ZLDialog dialog=ZLDialogManager.getInstance().createDialog("editTagInfoDialog");
  final String editOrCloneKey="editOrClone";
  final EditOrCloneEntry editOrCloneEntry=new EditOrCloneEntry(dialog.getResource(editOrCloneKey),editNotClone);
  editOrCloneEntry.setActive(!tagIsSpecial);
  dialog.addOption(editOrCloneKey,editOrCloneEntry);
  final TreeSet tagSet=new TreeSet();
  final ArrayList books=Collection.books();
  final int len=books.size();
  for (int i=0; i < len; ++i) {
    tagSet.addAll(((BookDescription)books.get(i)).getTags());
  }
  final TreeSet fullTagSet=new TreeSet(tagSet);
  for (Iterator it=tagSet.iterator(); it.hasNext(); ) {
    final String value=(String)it.next();
    for (int index=0; ; ) {
      index=value.indexOf('/',index);
      if (index == -1) {
        break;
      }
      fullTagSet.add(value.substring(0,index++));
    }
  }
  final ArrayList names=new ArrayList();
  if (!fullTagSet.contains(tag)) {
    names.add(tag);
  }
  names.addAll(fullTagSet);
  final TagNameEntry tagNameEntry=new TagNameEntry(names,tag);
  dialog.addOption("name",tagNameEntry);
  IncludeSubtagsEntry includeSubtagsEntry=new IncludeSubtagsEntry(includeSubtags);
  if (includeSubtags) {
    if (!hasBooks) {
      includeSubtagsEntry.setActive(false);
    }
    dialog.addOption("includeSubtags",includeSubtagsEntry);
  }
  dialog.addButton(ZLDialogManager.OK_BUTTON,null);
  dialog.addButton(ZLDialogManager.CANCEL_BUTTON,null);
  dialog.run();
}
