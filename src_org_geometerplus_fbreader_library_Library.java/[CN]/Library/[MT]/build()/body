{
  final FileInfoSet fileInfos=new FileInfoSet();
  final Map<Long,Book> savedBooks=BooksDatabase.Instance().loadBooks(fileInfos,true);
  boolean doGroupTitlesByFirstLetter=false;
  if (savedBooks.size() > 10) {
    final HashSet<String> letterSet=new HashSet<String>();
    for (    Book book : savedBooks.values()) {
      final String letter=TitleTree.firstTitleLetter(book);
      if (letter != null) {
        letterSet.add(letter);
      }
    }
    doGroupTitlesByFirstLetter=savedBooks.values().size() > letterSet.size() * 5 / 4;
  }
  collectBooks(fileInfos,savedBooks);
  final Map<Long,Book> bookById=new HashMap<Long,Book>();
  for (  Book book : myBooks) {
    bookById.put(book.getId(),book);
    List<Author> authors=book.authors();
    if (authors.isEmpty()) {
      authors=(List<Author>)myNullList;
    }
    final SeriesInfo seriesInfo=book.getSeriesInfo();
    for (    Author a : authors) {
      final AuthorTree authorTree=getFirstLevelTree(ROOT_BY_AUTHOR).getAuthorSubTree(a);
      if (seriesInfo == null) {
        authorTree.getBookSubTree(book,false);
      }
 else {
        final String series=seriesInfo.Name;
        final AuthorSeriesPair pair=new AuthorSeriesPair(a,series);
        final SeriesTree seriesTree=authorTree.getSeriesSubTree(series);
        seriesTree.getBookInSeriesSubTree(book);
      }
    }
    if (doGroupTitlesByFirstLetter) {
      final String letter=TitleTree.firstTitleLetter(book);
      if (letter != null) {
        final TitleTree tree=getFirstLevelTree(ROOT_BY_TITLE).getTitleSubTree(letter);
        tree.getBookSubTree(book,true);
      }
    }
 else {
      getFirstLevelTree(ROOT_BY_TITLE).getBookSubTree(book,true);
    }
    List<Tag> tags=book.tags();
    if (tags.isEmpty()) {
      tags=(List<Tag>)myNullList;
    }
    for (    Tag t : tags) {
      getTagTree(t).getBookSubTree(book,true);
    }
  }
  final BooksDatabase db=BooksDatabase.Instance();
  for (  long id : db.loadRecentBookIds()) {
    Book book=bookById.get(id);
    if (book != null) {
      new BookTree(getFirstLevelTree(ROOT_RECENT),book,true);
    }
  }
  for (  long id : db.loadFavoritesIds()) {
    Book book=bookById.get(id);
    if (book != null) {
      getFirstLevelTree(ROOT_FAVORITES).getBookSubTree(book,true);
    }
  }
  db.executeAsATransaction(new Runnable(){
    public void run(){
      for (      Book book : myBooks) {
        book.save();
      }
    }
  }
);
  myState=STATE_FULLY_INITIALIZED;
}
