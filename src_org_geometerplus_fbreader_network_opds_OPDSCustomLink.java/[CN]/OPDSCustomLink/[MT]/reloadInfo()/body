{
  final LinkedList<String> opensearchDescriptionURLs=new LinkedList<String>();
  final List<OpenSearchDescription> descriptions=Collections.synchronizedList(new LinkedList<OpenSearchDescription>());
  String err=ZLNetworkManager.Instance().perform(new ZLNetworkRequest(getLink(INetworkLink.URL_MAIN)){
    @Override public String handleStream(    URLConnection connection,    InputStream inputStream) throws IOException {
      final CatalogInfoReader info=new CatalogInfoReader(URL,OPDSCustomLink.this,opensearchDescriptionURLs);
      new OPDSXMLReader(info).read(inputStream);
      if (!info.FeedStarted) {
        return NetworkErrors.errorMessage("notAnOPDS");
      }
      if (info.Title == null) {
        return NetworkErrors.errorMessage("noRequiredInformation");
      }
      myTitle=info.Title;
      if (info.Icon != null) {
        myIcon=info.Icon;
      }
      if (info.Summary != null) {
        mySummary=info.Summary;
      }
      if (info.DirectOpenSearchDescription != null) {
        descriptions.add(info.DirectOpenSearchDescription);
      }
      return null;
    }
  }
);
  if (descriptions.isEmpty() && !opensearchDescriptionURLs.isEmpty()) {
    LinkedList<ZLNetworkRequest> requests=new LinkedList<ZLNetworkRequest>();
    for (    String url : opensearchDescriptionURLs) {
      requests.add(new ZLNetworkRequest(url){
        @Override public String handleStream(        URLConnection connection,        InputStream inputStream) throws IOException {
          new OpenSearchXMLReader(URL,descriptions,20).read(inputStream);
          return null;
        }
      }
);
    }
    final String err2=ZLNetworkManager.Instance().perform(requests);
    if (err == null) {
      err=err2;
    }
  }
  if (!descriptions.isEmpty()) {
    setLink(URL_SEARCH,descriptions.get(0).makeQuery("%s"));
  }
  return err;
}
