{
  drawBitmapTo(canvas,0,0,myPaint);
  final int cornerX=myStartX > myWidth / 2 ? myWidth : 0;
  final int cornerY=myStartY > myHeight / 2 ? myHeight : 0;
  final int oppositeX=Math.abs(myWidth - cornerX);
  final int oppositeY=Math.abs(myHeight - cornerY);
  final int x, y;
  if (myDirection.IsHorizontal) {
    x=myEndX;
    if (getMode().Auto) {
      y=myEndY;
    }
 else {
      if (cornerY == 0) {
        y=Math.max(1,Math.min(myHeight / 2,myEndY));
      }
 else {
        y=Math.max(myHeight / 2,Math.min(myHeight - 1,myEndY));
      }
    }
  }
 else {
    y=myEndY;
    if (getMode().Auto) {
      x=myEndX;
    }
 else {
      if (cornerX == 0) {
        x=Math.max(1,Math.min(myWidth / 2,myEndX));
      }
 else {
        x=Math.max(myWidth / 2,Math.min(myWidth - 1,myEndX));
      }
    }
  }
  final int dX=Math.max(1,Math.abs(x - cornerX));
  final int dY=Math.max(1,Math.abs(y - cornerY));
  final int x1=cornerX == 0 ? (dY * dY / dX + dX) / 2 : cornerX - (dY * dY / dX + dX) / 2;
  final int y1=cornerY == 0 ? (dX * dX / dY + dY) / 2 : cornerY - (dX * dX / dY + dY) / 2;
  float sX, sY;
{
    float d1=x - x1;
    float d2=y - cornerY;
    sX=FloatMath.sqrt(d1 * d1 + d2 * d2) / 2;
    if (cornerX == 0) {
      sX=-sX;
    }
  }
{
    float d1=x - cornerX;
    float d2=y - y1;
    sY=FloatMath.sqrt(d1 * d1 + d2 * d2) / 2;
    if (cornerY == 0) {
      sY=-sY;
    }
  }
  myFgPath.rewind();
  myFgPath.moveTo(x,y);
  myFgPath.lineTo((x + cornerX) / 2,(y + y1) / 2);
  myFgPath.quadTo(cornerX,y1,cornerX,y1 - sY);
  if (Math.abs(y1 - sY - cornerY) < myHeight) {
    myFgPath.lineTo(cornerX,oppositeY);
  }
  myFgPath.lineTo(oppositeX,oppositeY);
  if (Math.abs(x1 - sX - cornerX) < myWidth) {
    myFgPath.lineTo(oppositeX,cornerY);
  }
  myFgPath.lineTo(x1 - sX,cornerY);
  myFgPath.quadTo(x1,cornerY,(x + x1) / 2,(y + cornerY) / 2);
  myQuadPath.moveTo(x1 - sX,cornerY);
  myQuadPath.quadTo(x1,cornerY,(x + x1) / 2,(y + cornerY) / 2);
  canvas.drawPath(myQuadPath,myEdgePaint);
  myQuadPath.rewind();
  myQuadPath.moveTo((x + cornerX) / 2,(y + y1) / 2);
  myQuadPath.quadTo(cornerX,y1,cornerX,y1 - sY);
  canvas.drawPath(myQuadPath,myEdgePaint);
  myQuadPath.rewind();
  canvas.save();
  canvas.clipPath(myFgPath);
  drawBitmapFrom(canvas,0,0,myPaint);
  canvas.restore();
  myEdgePaint.setColor(ZLAndroidColorUtil.rgb(ZLAndroidColorUtil.getAverageColor(getBitmapFrom())));
  myEdgePath.rewind();
  myEdgePath.moveTo(x,y);
  myEdgePath.lineTo((x + cornerX) / 2,(y + y1) / 2);
  myEdgePath.quadTo((x + 3 * cornerX) / 4,(y + 3 * y1) / 4,(x + 7 * cornerX) / 8,(y + 7 * y1 - 2 * sY) / 8);
  myEdgePath.lineTo((x + 7 * x1 - 2 * sX) / 8,(y + 7 * cornerY) / 8);
  myEdgePath.quadTo((x + 3 * x1) / 4,(y + 3 * cornerY) / 4,(x + x1) / 2,(y + cornerY) / 2);
  canvas.drawPath(myEdgePath,myEdgePaint);
}
