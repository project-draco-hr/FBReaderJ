{
  final LinkedList<FBTree> toRemove=new LinkedList<FBTree>();
  ListIterator<FBTree> nodeIterator=subTrees().listIterator();
  FBTree currentTree=null;
  int nodeCount=0;
  for (int i=0; i < myChildrenItems.size(); ++i) {
    final NetworkCatalogItem currentItem=myChildrenItems.get(i);
    boolean processed=false;
    while (currentTree != null || nodeIterator.hasNext()) {
      if (currentTree == null) {
        currentTree=nodeIterator.next();
      }
      if (!(currentTree instanceof NetworkCatalogTree)) {
        currentTree=null;
        ++nodeCount;
        continue;
      }
      NetworkCatalogTree child=(NetworkCatalogTree)currentTree;
      if (child.Item == currentItem) {
switch (child.Item.getVisibility()) {
case B3_TRUE:
          child.updateVisibility();
        break;
case B3_FALSE:
      toRemove.add(child);
    break;
case B3_UNDEFINED:
  child.clearCatalog();
break;
}
currentTree=null;
++nodeCount;
processed=true;
break;
}
 else {
boolean found=false;
for (int j=i + 1; j < myChildrenItems.size(); ++j) {
if (child.Item == myChildrenItems.get(j)) {
found=true;
break;
}
}
if (!found) {
toRemove.add(currentTree);
currentTree=null;
++nodeCount;
}
 else {
break;
}
}
}
final int nextIndex=nodeIterator.nextIndex();
if (!processed && NetworkTreeFactory.createNetworkTree(this,currentItem,nodeCount) != null) {
++nodeCount;
nodeIterator=subTrees().listIterator(nextIndex + 1);
}
}
while (currentTree != null || nodeIterator.hasNext()) {
if (currentTree == null) {
currentTree=nodeIterator.next();
}
if (currentTree instanceof NetworkCatalogTree) {
toRemove.add(currentTree);
}
currentTree=null;
}
for (FBTree tree : toRemove) {
tree.removeSelf();
}
}
