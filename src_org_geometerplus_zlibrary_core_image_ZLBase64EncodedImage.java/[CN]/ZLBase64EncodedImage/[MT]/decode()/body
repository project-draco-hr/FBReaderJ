{
  if (myIsDecoded) {
    return;
  }
  myIsDecoded=true;
  final File outputFile=new File(decodedFileName());
  if (isCacheValid(outputFile)) {
    return;
  }
  FileOutputStream outputStream=new FileOutputStream(outputFile);
  try {
    int dataLength;
    byte[] encodedData;
    final File file=new File(encodedFileName());
    final FileInputStream inputStream=new FileInputStream(file);
    try {
      dataLength=(int)file.length();
      encodedData=new byte[dataLength];
      inputStream.read(encodedData);
    }
  finally {
      inputStream.close();
    }
    file.delete();
    final byte[] data=new byte[dataLength * 3 / 4 + 4];
    int dataPos=0;
    for (int pos=0; pos < dataLength; ) {
      byte n0=-1, n1=-1, n2=-1, n3=-1;
      while ((pos < dataLength) && (n0 == -1)) {
        n0=decodeByte(encodedData[pos++]);
      }
      while ((pos < dataLength) && (n1 == -1)) {
        n1=decodeByte(encodedData[pos++]);
      }
      while ((pos < dataLength) && (n2 == -1)) {
        n2=decodeByte(encodedData[pos++]);
      }
      while ((pos < dataLength) && (n3 == -1)) {
        n3=decodeByte(encodedData[pos++]);
      }
      data[dataPos++]=(byte)(n0 << 2 | n1 >> 4);
      data[dataPos++]=(byte)(((n1 & 0xf) << 4) | ((n2 >> 2) & 0xf));
      data[dataPos++]=(byte)(n2 << 6 | n3);
    }
    outputStream.write(data,0,dataPos);
  }
  finally {
    outputStream.close();
  }
}
