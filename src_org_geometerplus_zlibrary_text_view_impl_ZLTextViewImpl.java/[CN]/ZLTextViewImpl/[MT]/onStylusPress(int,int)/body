{
  if (myModel == null) {
    return false;
  }
  ZLTextIndicatorInfo indicatorInfo=getIndicatorInfo();
  if (indicatorInfo.isVisible() && indicatorInfo.isSensitive() && !myStartCursor.isNull()) {
    final ZLPaintContext context=getContext();
    final int yBottom=context.getHeight() - getBottomMargin() - 1;
    final int yTop=yBottom - indicatorInfo.getHeight() + 1;
    final int xLeft=getLeftMargin();
    final int xRight=context.getWidth() - getRightMargin() - 1;
    if ((x > xLeft) && (x < xRight) && (y > yTop)&& (y < yBottom)) {
      Position position=new Position(myStartCursor);
      myTreeStateIsFrozen=true;
      final int[] textSizeVector=myTextSize;
      final int value=textSizeVector[textSizeVector.length - 1] * (x - xLeft) / (xRight - xLeft - 1);
      final int paragraphIndex=lowerBound(textSizeVector,value);
      gotoParagraph(paragraphIndex,true);
      preparePaintInfo();
      final int endCursorIndex=myEndCursor.getParagraphCursor().getIndex();
      if (endCursorIndex == paragraphIndex) {
        final int paragraphLength=myEndCursor.getParagraphCursor().getParagraphLength();
        int wordCounter=paragraphLength * (value - textSizeVector[paragraphIndex]) / (textSizeVector[paragraphIndex + 1] - textSizeVector[paragraphIndex]);
        if (wordCounter > 0) {
          if (wordCounter == paragraphLength) {
            myEndCursor.nextParagraph();
          }
 else {
            wordCounter-=myEndCursor.getWordNumber();
            while (wordCounter-- > 0) {
              myEndCursor.nextWord();
            }
          }
          myStartCursor.reset();
          rebuildPaintInfo(false);
        }
      }
      if (myStartCursor.isNull()) {
        preparePaintInfo();
      }
      if (!position.equalsToCursor(myStartCursor)) {
        savePosition(position);
      }
      getApplication().refreshWindow();
      myTreeStateIsFrozen=false;
      return true;
    }
  }
  if (myModel instanceof ZLTextTreeModel) {
    ZLTextTreeNodeArea nodeArea=(ZLTextTreeNodeArea)myTreeNodeMap.binarySearch(x,y);
    if (nodeArea != null) {
      final int index=nodeArea.ParagraphNumber;
      final ZLTextTreeParagraph paragraph=((ZLTextTreeModel)myModel).getTreeParagraph(index);
      paragraph.open(!paragraph.isOpen());
      rebuildPaintInfo(true);
      preparePaintInfo();
      if (paragraph.isOpen()) {
        int nextParagraphNumber=index + paragraph.getFullSize();
        int lastParagraphNumber=myEndCursor.getParagraphCursor().getIndex();
        if (myEndCursor.isEndOfParagraph()) {
          ++lastParagraphNumber;
        }
      }
      int firstParagraphNumber=myStartCursor.getParagraphCursor().getIndex();
      if (myStartCursor.isStartOfParagraph()) {
        --firstParagraphNumber;
      }
      getApplication().refreshWindow();
      return true;
    }
  }
  return false;
}
