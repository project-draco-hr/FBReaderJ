{
  final String BASE="base";
  final String STYLE="style";
  if (BASE.equals(tag)) {
    if (Screen.equals(attributes.getValue("screen"))) {
      myDefaultFontSize=intValue(attributes,"fontSize",0);
      myBaseStyle=new ZLTextBaseStyle(Screen,attributes.getValue("family"),myDefaultFontSize);
    }
  }
 else   if (STYLE.equals(tag)) {
    String idString=attributes.getValue("id");
    String name=attributes.getValue("name");
    if ((idString != null) && (name != null)) {
      byte id=Byte.parseByte(idString);
      ZLTextStyleDecoration decoration;
      final String fontFamily=attributes.getValue("family");
      final int fontSizeDelta=intValue(attributes,"fontSizeDelta",0);
      final ZLBoolean3 bold=b3Value(attributes,"bold");
      final ZLBoolean3 italic=b3Value(attributes,"italic");
      final ZLBoolean3 underline=b3Value(attributes,"underline");
      final ZLBoolean3 strikeThrough=b3Value(attributes,"strikeThrough");
      final int verticalShift=intValue(attributes,"vShift",0);
      final ZLBoolean3 allowHyphenations=b3Value(attributes,"allowHyphenations");
      if (booleanValue(attributes,"partial")) {
        decoration=new ZLTextStyleDecoration(name,fontFamily,fontSizeDelta,bold,italic,underline,strikeThrough,verticalShift,allowHyphenations);
      }
 else {
        int spaceBefore=intValue(attributes,"spaceBefore",0);
        int spaceAfter=intValue(attributes,"spaceAfter",0);
        int leftIndent=intValue(attributes,"leftIndent",0);
        int rightIndent=intValue(attributes,"rightIndent",0);
        int firstLineIndentDelta=intValue(attributes,"firstLineIndentDelta",0);
        byte alignment=ZLTextAlignmentType.ALIGN_UNDEFINED;
        String alignmentString=attributes.getValue("alignment");
        if (alignmentString != null) {
          if (alignmentString.equals("left")) {
            alignment=ZLTextAlignmentType.ALIGN_LEFT;
          }
 else           if (alignmentString.equals("right")) {
            alignment=ZLTextAlignmentType.ALIGN_RIGHT;
          }
 else           if (alignmentString.equals("center")) {
            alignment=ZLTextAlignmentType.ALIGN_CENTER;
          }
 else           if (alignmentString.equals("justify")) {
            alignment=ZLTextAlignmentType.ALIGN_JUSTIFY;
          }
        }
        final int lineSpacePercent=intValue(attributes,"lineSpacingPercent",-1);
        decoration=new ZLTextFullStyleDecoration(name,fontFamily,fontSizeDelta,bold,italic,underline,strikeThrough,spaceBefore,spaceAfter,leftIndent,rightIndent,firstLineIndentDelta,verticalShift,alignment,lineSpacePercent,allowHyphenations);
      }
      myDecorationMap[id & 0xFF]=decoration;
    }
  }
  return false;
}
