{
  final String BASE="base";
  final String STYLE="style";
  if (BASE.equals(tag)) {
    if (Screen.equals(attributes.getValue("screen"))) {
      myDefaultFontSize=intValue(attributes,"fontSize",0);
      myBaseStyle=new ZLTextBaseStyle(Screen,attributes.getValue("family"),myDefaultFontSize);
    }
  }
 else   if (STYLE.equals(tag)) {
    String idString=attributes.getValue("id");
    String name=attributes.getValue("name");
    if (idString != null && name != null) {
      byte id=Byte.parseByte(idString);
      final int fontSizeDelta=intValue(attributes,"fontSizeDelta",0);
      final ZLBoolean3 bold=b3Value(attributes,"bold");
      final ZLBoolean3 italic=b3Value(attributes,"italic");
      final ZLBoolean3 allowHyphenations=b3Value(attributes,"allowHyphenations");
      int spaceBefore=intValue(attributes,"spaceBefore",0);
      int spaceAfter=intValue(attributes,"spaceAfter",0);
      int leftIndent=intValue(attributes,"leftIndent",0);
      int rightIndent=intValue(attributes,"rightIndent",0);
      int firstLineIndentDelta=intValue(attributes,"firstLineIndentDelta",0);
      byte alignment=ZLTextAlignmentType.ALIGN_UNDEFINED;
      String alignmentString=attributes.getValue("alignment");
      if (alignmentString != null) {
        if (alignmentString.equals("left")) {
          alignment=ZLTextAlignmentType.ALIGN_LEFT;
        }
 else         if (alignmentString.equals("right")) {
          alignment=ZLTextAlignmentType.ALIGN_RIGHT;
        }
 else         if (alignmentString.equals("center")) {
          alignment=ZLTextAlignmentType.ALIGN_CENTER;
        }
 else         if (alignmentString.equals("justify")) {
          alignment=ZLTextAlignmentType.ALIGN_JUSTIFY;
        }
      }
      final int lineSpacePercent=intValue(attributes,"lineSpacingPercent",-1);
      myDecorationMap[id & 0xFF]=new ZLTextFullStyleDecoration(name,null,fontSizeDelta,bold,italic,ZLBoolean3.B3_UNDEFINED,ZLBoolean3.B3_UNDEFINED,spaceBefore,spaceAfter,leftIndent,rightIndent,firstLineIndentDelta,0,alignment,lineSpacePercent,allowHyphenations);
    }
  }
  return false;
}
