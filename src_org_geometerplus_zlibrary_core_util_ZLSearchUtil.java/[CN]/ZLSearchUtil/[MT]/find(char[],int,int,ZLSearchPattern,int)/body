{
  if (pos < 0) {
    pos=0;
  }
  final char[] lower=pattern.LowerCasePattern;
  final int patternLength=lower.length;
  final int end=offset + length;
  final int lastStart=end - patternLength;
  if (pattern.IgnoreCase) {
    final char[] upper=pattern.UpperCasePattern;
    final char firstCharLower=lower[0];
    final char firstCharUpper=upper[0];
    for (int i=offset + pos; i <= lastStart; ++i) {
      final char current=text[i];
      if (current == firstCharLower || current == firstCharUpper) {
        int j=1;
        int k=i + 1;
        for (; j < patternLength; ++k) {
          final char symbol=text[k];
          if (symbol == '\u200b') {
            if (patternLength - j > end - k) {
              break;
            }
 else {
              continue;
            }
          }
          if (lower[j] != symbol && upper[j] != symbol) {
            break;
          }
          ++j;
        }
        if (j == patternLength) {
          return new Result(i - offset,k - i);
        }
      }
    }
  }
 else {
    final char firstChar=lower[0];
    for (int i=offset + pos; i <= lastStart; i++) {
      if (text[i] == firstChar) {
        int j=1;
        int k=i + 1;
        for (; j < patternLength; ++k) {
          final char symbol=text[k];
          if (symbol == '\u200b') {
            if (patternLength - j > end - k) {
              break;
            }
 else {
              continue;
            }
          }
          if (lower[j] != text[k]) {
            break;
          }
          ++j;
        }
        if (j >= patternLength) {
          return new Result(i - offset,k - i);
        }
      }
    }
  }
  return null;
}
