{
  final int len=word.Length;
  final boolean[] isLetter=new boolean[len];
  final char[] pattern=new char[len + 2];
  final char[] data=word.Data;
  pattern[0]=' ';
  for (int i=0, j=word.Offset; i < len; ++i, ++j) {
    char symbol=data[j];
    if (ZLCharacterUtil.isLetter(symbol)) {
      isLetter[i]=true;
      pattern[i + 1]=Character.toLowerCase(symbol);
    }
 else {
      pattern[i + 1]=' ';
    }
  }
  pattern[len + 1]=' ';
  final ZLTextHyphenationInfo info=new ZLTextHyphenationInfo(len + 2);
  final boolean[] mask=info.Mask;
  hyphenate(pattern,mask,len + 2);
  for (int i=0, j=word.Offset - 1; i <= len; ++i, ++j) {
    if ((i < 2) || (i > len - 2)) {
      mask[i]=false;
    }
 else     if (data[j] == '-') {
      mask[i]=(i >= 3) && isLetter[i - 3] && isLetter[i - 2]&& isLetter[i]&& isLetter[i + 1];
    }
 else {
      mask[i]=mask[i] && isLetter[i - 2] && isLetter[i - 1]&& isLetter[i]&& isLetter[i + 1];
    }
  }
  return info;
}
