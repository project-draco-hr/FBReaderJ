{
  bag.mTxtFileName.setSingleLine(parent instanceof GridView);
  final boolean isAccessible=FileUtils.isAccessible(file,mFilenameRegexp);
  bag.mImageIcon.setImageResource(FileUtils.getResIcon(file,mFilterMode));
  final ColorMatrix matrix=new ColorMatrix();
  if (!isAccessible) {
    final ColorMatrix scaleMatrix=new ColorMatrix();
    scaleMatrix.setScale(.7f,.7f,.7f,1f);
    final ColorMatrix saturationMatrix=new ColorMatrix();
    saturationMatrix.setSaturation(0f);
    matrix.setConcat(saturationMatrix,scaleMatrix);
  }
  bag.mImageIcon.setColorFilter(new ColorMatrixColorFilter(matrix));
  bag.mTxtFileName.setText(file.getSecondName());
  if (data.isTobeDeleted())   bag.mTxtFileName.setPaintFlags(bag.mTxtFileName.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
 else   bag.mTxtFileName.setPaintFlags(bag.mTxtFileName.getPaintFlags() & ~Paint.STRIKE_THRU_TEXT_FLAG);
  String time=DateUtils.formatDate(mContext,file.lastModified(),mFileTimeDisplay);
  if (file.isDirectory())   bag.mTxtFileInfo.setText(time);
 else   bag.mTxtFileInfo.setText(String.format("%s, %s",Converter.sizeToStr(file.length()),time));
  bag.mTxtFileName.setEnabled(isAccessible);
  bag.mTxtFileInfo.setEnabled(isAccessible);
  if (mMultiSelection) {
    if (FilterMode.FilesOnly.equals(mFilterMode) && file.isDirectory()) {
      bag.mCheckboxSelection.setVisibility(View.GONE);
    }
 else {
      bag.mCheckboxSelection.setVisibility(View.VISIBLE);
      bag.mCheckboxSelection.setFocusable(false);
      bag.mCheckboxSelection.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
        @Override public void onCheckedChanged(        CompoundButton buttonView,        boolean isChecked){
          data.setSelected(isChecked);
        }
      }
);
      bag.mCheckboxSelection.setOnLongClickListener(mCheckboxSelectionOnLongClickListener);
      bag.mCheckboxSelection.setChecked(data.isSelected());
    }
  }
 else   bag.mCheckboxSelection.setVisibility(View.GONE);
}
