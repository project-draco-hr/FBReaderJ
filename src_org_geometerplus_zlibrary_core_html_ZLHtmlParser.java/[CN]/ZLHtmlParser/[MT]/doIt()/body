{
  final InputStream stream=myStream;
  final ZLHtmlReader htmlReader=myReader;
  byte[] buffer=new byte[8192];
  final ZLByteBuffer tagName=new ZLByteBuffer();
  final ZLByteBuffer attributeName=new ZLByteBuffer();
  final ZLByteBuffer attributeValue=new ZLByteBuffer();
  final HashMap<ZLByteBuffer,ZLByteBuffer> strings=new HashMap<ZLByteBuffer,ZLByteBuffer>();
  final ZLHtmlAttributeMap attributes=new ZLHtmlAttributeMap();
  boolean scriptOpened=false;
  boolean html=false;
  byte state=START_DOCUMENT;
  int CNT=0;
  while (++CNT < 300) {
    int count=stream.read(buffer);
    System.err.println(CNT + ":" + count);
    if (count <= 0) {
      return;
    }
    if (count < buffer.length) {
      buffer=ZLArrayUtils.createCopy(buffer,count,count);
    }
    int startPosition=0;
    try {
      for (int i=-1; ; ) {
        mainSwitchLabel: switch (state) {
case START_DOCUMENT:
          while (buffer[++i] != '<') {
          }
        state=LANGLE;
      break;
case LANGLE:
switch (buffer[++i]) {
case '/':
      state=END_TAG;
    startPosition=i + 1;
  break;
case '!':
{
switch (buffer[++i]) {
case '-':
    state=COMMENT_MINUS;
  i--;
break;
default :
state=COMMENT;
break;
}
}
case '?':
state=COMMENT;
break;
default :
state=START_TAG;
startPosition=i;
break;
}
break;
case SCRIPT:
while (true) {
if (buffer[++i] == '<') {
if (buffer[++i] == '/') {
state=END_TAG;
startPosition=i + 1;
break mainSwitchLabel;
}
}
}
case COMMENT_MINUS:
{
int minusCounter=0;
while (minusCounter != 2) {
switch (buffer[++i]) {
case '-':
minusCounter++;
break;
default :
minusCounter=0;
break;
}
}
switch (buffer[++i]) {
case '>':
state=TEXT;
startPosition=i + 1;
break mainSwitchLabel;
}
}
case COMMENT:
while (true) {
switch (buffer[++i]) {
case '>':
state=TEXT;
startPosition=i + 1;
break mainSwitchLabel;
}
}
case START_TAG:
while (true) {
switch (buffer[++i]) {
case 0x0008:
case 0x0009:
case 0x000A:
case 0x000B:
case 0x000C:
case 0x000D:
case ' ':
state=WS_AFTER_START_TAG_NAME;
tagName.append(buffer,startPosition,i - startPosition);
break mainSwitchLabel;
case '>':
state=TEXT;
tagName.append(buffer,startPosition,i - startPosition);
{
ZLByteBuffer stringTagName=unique(strings,tagName);
processStartTag(htmlReader,stringTagName,attributes);
if (stringTagName.equalsToLCString("script")) {
scriptOpened=true;
state=SCRIPT;
break mainSwitchLabel;
}
if (stringTagName.equalsToLCString("html")) {
html=true;
}
}
startPosition=i + 1;
break mainSwitchLabel;
case '/':
state=SLASH;
tagName.append(buffer,startPosition,i - startPosition);
break mainSwitchLabel;
}
}
case END_TAG:
while (true) {
switch (buffer[++i]) {
case 0x0008:
case 0x0009:
case 0x000A:
case 0x000B:
case 0x000C:
case 0x000D:
case ' ':
state=WS_AFTER_END_TAG_NAME;
tagName.append(buffer,startPosition,i - startPosition);
break mainSwitchLabel;
case '>':
tagName.append(buffer,startPosition,i - startPosition);
{
ZLByteBuffer stringTagName=unique(strings,tagName);
processEndTag(htmlReader,stringTagName);
if (scriptOpened) {
}
if (stringTagName.equalsToLCString("script")) {
scriptOpened=false;
}
}
if (scriptOpened) {
state=SCRIPT;
}
 else {
state=TEXT;
startPosition=i + 1;
}
break mainSwitchLabel;
}
}
case WS_AFTER_START_TAG_NAME:
switch (buffer[++i]) {
case '>':
{
ZLByteBuffer stringTagName=unique(strings,tagName);
processStartTag(htmlReader,stringTagName,attributes);
if (stringTagName.equalsToLCString("script")) {
scriptOpened=true;
state=SCRIPT;
break mainSwitchLabel;
}
}
state=TEXT;
startPosition=i + 1;
break;
case '/':
state=SLASH;
break;
case 0x0008:
case 0x0009:
case 0x000A:
case 0x000B:
case 0x000C:
case 0x000D:
case ' ':
break;
default :
state=ATTRIBUTE_NAME;
startPosition=i;
break;
}
break;
case WS_AFTER_END_TAG_NAME:
switch (buffer[++i]) {
case '>':
{
ZLByteBuffer stringTagName=unique(strings,tagName);
processEndTag(htmlReader,stringTagName);
if (stringTagName.equalsToLCString("script")) {
scriptOpened=false;
}
}
if (scriptOpened) {
state=SCRIPT;
}
 else {
state=TEXT;
startPosition=i + 1;
}
break;
}
break;
case ATTRIBUTE_NAME:
while (true) {
switch (buffer[++i]) {
case '=':
attributeName.append(buffer,startPosition,i - startPosition);
state=WAIT_ATTRIBUTE_VALUE;
break mainSwitchLabel;
case 0x0008:
case 0x0009:
case 0x000A:
case 0x000B:
case 0x000C:
case 0x000D:
case ' ':
attributeName.append(buffer,startPosition,i - startPosition);
state=WAIT_EQUALS;
break mainSwitchLabel;
}
}
case WAIT_EQUALS:
while (true) {
switch (buffer[++i]) {
case '=':
state=WAIT_ATTRIBUTE_VALUE;
break mainSwitchLabel;
}
}
case WAIT_ATTRIBUTE_VALUE:
while (true) {
switch (buffer[++i]) {
case ' ':
break;
case '\t':
break;
case '\n':
break;
case '\'':
state=S_ATTRIBUTE_VALUE;
startPosition=i + 1;
break mainSwitchLabel;
case '"':
state=D_ATTRIBUTE_VALUE;
startPosition=i + 1;
break mainSwitchLabel;
default :
state=DEFAULT_ATTRIBUTE_VALUE;
startPosition=i;
break mainSwitchLabel;
}
}
case DEFAULT_ATTRIBUTE_VALUE:
while (true) {
i++;
if ((buffer[i] == ' ') || (buffer[i] == '\'') || (buffer[i] == '"')|| (buffer[i] == '>')) {
attributeValue.append(buffer,startPosition,i - startPosition);
attributes.put(unique(strings,attributeName),new ZLByteBuffer(attributeValue));
attributeValue.clear();
}
switch (buffer[i]) {
case ' ':
case '\'':
case '"':
state=WS_AFTER_START_TAG_NAME;
break mainSwitchLabel;
case '/':
state=SLASH;
break mainSwitchLabel;
case '>':
ZLByteBuffer stringTagName=unique(strings,tagName);
processStartTag(htmlReader,stringTagName,attributes);
if (stringTagName.equalsToLCString("script")) {
scriptOpened=true;
state=SCRIPT;
break mainSwitchLabel;
}
state=TEXT;
startPosition=i + 1;
break mainSwitchLabel;
}
}
case D_ATTRIBUTE_VALUE:
while (true) {
switch (buffer[++i]) {
case '"':
attributeValue.append(buffer,startPosition,i - startPosition);
state=WS_AFTER_START_TAG_NAME;
attributes.put(unique(strings,attributeName),new ZLByteBuffer(attributeValue));
attributeValue.clear();
break mainSwitchLabel;
}
}
case S_ATTRIBUTE_VALUE:
while (true) {
switch (buffer[++i]) {
case '\'':
attributeValue.append(buffer,startPosition,i - startPosition);
state=WS_AFTER_START_TAG_NAME;
attributes.put(unique(strings,attributeName),new ZLByteBuffer(attributeValue));
attributeValue.clear();
break mainSwitchLabel;
}
}
case SLASH:
while (true) {
switch (buffer[++i]) {
case ' ':
break;
case '>':
processFullTag(htmlReader,unique(strings,tagName),attributes);
state=TEXT;
startPosition=i + 1;
break mainSwitchLabel;
default :
state=DEFAULT_ATTRIBUTE_VALUE;
break mainSwitchLabel;
}
}
case TEXT:
while (true) {
switch (buffer[++i]) {
case '<':
if (i > startPosition) {
htmlReader.byteDataHandlerFinal(buffer,startPosition,i - startPosition);
}
state=LANGLE;
break mainSwitchLabel;
}
}
}
}
}
 catch (ArrayIndexOutOfBoundsException e) {
switch (state) {
case START_TAG:
case END_TAG:
tagName.append(buffer,startPosition,count - startPosition);
break;
case ATTRIBUTE_NAME:
attributeName.append(buffer,startPosition,count - startPosition);
break;
case S_ATTRIBUTE_VALUE:
case D_ATTRIBUTE_VALUE:
attributeValue.append(buffer,startPosition,count - startPosition);
break;
case TEXT:
htmlReader.byteDataHandler(buffer,startPosition,count - startPosition);
break;
}
}
}
}
