{
  if (myState == ST_NO_COMPRESSION) {
    myOutputBuffer.writeByte((byte)myStream.read());
    myReadInBlock++;
    if (myCurrentBlockLength == myReadInBlock) {
      if (myTheBlockIsFinal) {
        myState=ST_END_OF_FILE;
      }
 else {
        myState=ST_HEADER;
      }
    }
    return 1;
  }
 else {
    int currentHuffmanCode=readHuffmanCode(myHuffmanCodes);
    int length;
switch (currentHuffmanCode) {
default :
      myOutputBuffer.writeByte((byte)currentHuffmanCode);
    return 1;
case 256:
  myState=myTheBlockIsFinal ? ST_END_OF_FILE : ST_HEADER;
return 0;
case 257:
case 258:
case 259:
case 260:
case 261:
case 262:
case 263:
case 264:
length=currentHuffmanCode + 3 - 257;
break;
case 265:
case 266:
case 267:
case 268:
length=((currentHuffmanCode - 265) << 1) + 11 + getBit();
break;
case 269:
case 270:
case 271:
case 272:
length=((currentHuffmanCode - 269) << 2) + 19 + readIntegerByBit(2);
break;
case 273:
case 274:
case 275:
case 276:
length=((currentHuffmanCode - 273) << 3) + 35 + readIntegerByBit(3);
break;
case 277:
case 278:
case 279:
case 280:
length=((currentHuffmanCode - 277) << 4) + 67 + readIntegerByBit(4);
break;
case 281:
case 282:
case 283:
case 284:
length=((currentHuffmanCode - 281) << 5) + 115 + readIntegerByBit(5);
break;
case 285:
length=285;
break;
}
final int huffmanCode=readHuffmanCode(myDistanceCodes);
final int distance;
if (huffmanCode <= 3) {
distance=huffmanCode + 1;
}
 else if (huffmanCode <= 29) {
final int extraBits=(huffmanCode / 2) - 1;
int previousCode=(1 << (huffmanCode / 2));
if ((huffmanCode % 2) != 0) {
previousCode+=(1 << extraBits);
}
distance=previousCode + 1 + readIntegerByBit(extraBits);
}
 else {
throw new RuntimeException("distance code > 29 found");
}
myOutputBuffer.repeat(length,distance);
return length;
}
}
