{
  super.onCreateOptionsMenu(menu);
  myMenuActions.clear();
  myMenuActions.add(new RootAction(ActionCode.SEARCH,"networkSearch",R.drawable.ic_menu_search){
    @Override public boolean isEnabled(    NetworkTree tree){
      return !searchIsInProgress();
    }
    @Override public void run(    NetworkTree tree){
      onSearchRequested();
    }
  }
);
  myMenuActions.add(new RootAction(ActionCode.CUSTOM_CATALOG_ADD,"addCustomCatalog",R.drawable.ic_menu_add){
    @Override public void run(    NetworkTree tree){
      AddCustomCatalogItemActions.addCustomCatalog(NetworkLibraryActivity.this);
    }
  }
);
  myMenuActions.add(new RootAction(ActionCode.REFRESH,"refreshCatalogsList",R.drawable.ic_menu_refresh){
    @Override public void run(    NetworkTree tree){
      refreshCatalogsList();
    }
  }
);
  myMenuActions.add(new LanguageFilterAction(this));
  myMenuActions.add(new CatalogAction(ActionCode.RELOAD_CATALOG,"reload"){
    @Override public boolean isVisible(    NetworkTree tree){
      if (!super.isVisible(tree)) {
        return false;
      }
      final NetworkCatalogItem item=((NetworkCatalogTree)tree).Item;
      if (!(item instanceof NetworkURLCatalogItem)) {
        return false;
      }
      return ((NetworkURLCatalogItem)item).getUrl(UrlInfo.Type.Catalog) != null && ItemsLoadingService.getRunnable(tree) == null;
    }
    @Override public void run(    NetworkTree tree){
      NetworkCatalogActions.doReloadCatalog(NetworkLibraryActivity.this,(NetworkCatalogTree)tree);
    }
  }
);
  myMenuActions.add(new SignInAction(this));
  myMenuActions.add(new SignUpAction(this));
  myMenuActions.add(new SignOutAction(this));
  myMenuActions.add(new CatalogAction(ActionCode.TOPUP,"topup"){
    @Override public boolean isVisible(    NetworkTree tree){
      if (!super.isVisible(tree)) {
        return false;
      }
      final NetworkCatalogItem item=((NetworkCatalogTree)tree).Item;
      final NetworkAuthenticationManager mgr=item.Link.authenticationManager();
      return mgr != null && mgr.mayBeAuthorised(false) && mgr.currentAccount() != null && TopupMenuActivity.isTopupSupported(item.Link);
    }
    @Override public void run(    NetworkTree tree){
      TopupMenuActivity.runMenu(NetworkLibraryActivity.this,((NetworkCatalogTree)tree).Item.Link,"113");
    }
  }
);
  final NetworkTree tree=(NetworkTree)getCurrentTree();
  for (  Action a : myMenuActions) {
    addMenuItem(menu,a,tree);
  }
  return true;
}
