{
  super.onCreateOptionsMenu(menu);
  myMenuActions.clear();
  myMenuActions.add(new RootAction(ActionCode.SEARCH,"networkSearch",R.drawable.ic_menu_search){
    @Override public boolean isEnabled(    NetworkTree tree){
      return !searchIsInProgress();
    }
    @Override public void run(    NetworkTree tree){
      onSearchRequested();
    }
  }
);
  myMenuActions.add(new RootAction(ActionCode.CUSTOM_CATALOG_ADD,"addCustomCatalog",R.drawable.ic_menu_add){
  }
);
  myMenuActions.add(new RootAction(ActionCode.REFRESH,"refreshCatalogsList",R.drawable.ic_menu_refresh){
  }
);
  myMenuActions.add(new RootAction(ActionCode.LANGUAGE_FILTER,"languages",R.drawable.ic_menu_languages){
  }
);
  myMenuActions.add(new CatalogAction(ActionCode.RELOAD_CATALOG,"reload"){
    @Override public boolean isVisible(    NetworkTree tree){
      if (!super.isVisible(tree)) {
        return false;
      }
      final NetworkCatalogItem item=((NetworkCatalogTree)tree).Item;
      if (!(item instanceof NetworkURLCatalogItem)) {
        return false;
      }
      return ((NetworkURLCatalogItem)item).getUrl(UrlInfo.Type.Catalog) != null && ItemsLoadingService.getRunnable(tree) == null;
    }
  }
);
  myMenuActions.add(new CatalogAction(ActionCode.SIGNIN,"signIn"){
    @Override public boolean isVisible(    NetworkTree tree){
      if (!super.isVisible(tree)) {
        return false;
      }
      final NetworkAuthenticationManager mgr=(((NetworkCatalogTree)tree).Item).Link.authenticationManager();
      return mgr != null && !mgr.mayBeAuthorised(false);
    }
  }
);
  myMenuActions.add(new SignUpAction(this));
  myMenuActions.add(new CatalogAction(ActionCode.SIGNOUT,"signOut"){
    @Override public boolean isVisible(    NetworkTree tree){
      if (!super.isVisible(tree)) {
        return false;
      }
      final NetworkAuthenticationManager mgr=(((NetworkCatalogTree)tree).Item).Link.authenticationManager();
      return mgr != null && mgr.mayBeAuthorised(false);
    }
    @Override public String getLabel(    NetworkTree tree){
      final NetworkAuthenticationManager mgr=(((NetworkCatalogTree)tree).Item).Link.authenticationManager();
      final String userName=mgr != null && mgr.mayBeAuthorised(false) ? mgr.currentUserName() : "";
      return super.getLabel(tree).replace("%s",userName);
    }
  }
);
  myMenuActions.add(new CatalogAction(ActionCode.TOPUP,"topup"){
    @Override public boolean isVisible(    NetworkTree tree){
      if (!super.isVisible(tree)) {
        return false;
      }
      final NetworkCatalogItem item=((NetworkCatalogTree)tree).Item;
      final NetworkAuthenticationManager mgr=item.Link.authenticationManager();
      return mgr != null && mgr.mayBeAuthorised(false) && mgr.currentAccount() != null && TopupMenuActivity.isTopupSupported(item.Link);
    }
  }
);
  final NetworkTree tree=(NetworkTree)getCurrentTree();
  for (  Action a : myMenuActions) {
    addMenuItem(menu,a,tree);
  }
  return true;
}
