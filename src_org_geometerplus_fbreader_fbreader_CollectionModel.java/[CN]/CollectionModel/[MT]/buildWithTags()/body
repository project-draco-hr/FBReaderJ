{
  final ZLResource resource=ZLResource.resource("library");
  final ArrayList books=myCollection.books();
  if (myView.ShowAllBooksTagOption.getValue()) {
    final ZLTextTreeParagraph allBooksParagraph=createParagraph(null);
    insertText(FBTextKind.LIBRARY_AUTHOR_ENTRY,resource.getResource("allBooks").getValue());
    insertImage(TagInfoImageId);
    myParagraphToTag.put(allBooksParagraph,CollectionView.SpecialTagAllBooks);
    addBooks(books,allBooksParagraph);
  }
  final TreeMap tagMap=new TreeMap();
  final ArrayList booksWithoutTags=new ArrayList();
  final int len=books.size();
  for (int i=0; i < len; ++i) {
    final BookDescription description=(BookDescription)books.get(i);
    final ArrayList bookTags=description.getTags();
    if (bookTags.isEmpty()) {
      booksWithoutTags.add(description);
    }
 else {
      final int bookTagsLen=bookTags.size();
      for (int j=0; j < bookTagsLen; ++j) {
        Object tg=bookTags.get(j);
        ArrayList list=(ArrayList)tagMap.get(tg);
        if (list == null) {
          list=new ArrayList();
          tagMap.put(tg,list);
        }
        list.add(description);
      }
    }
  }
  if (!booksWithoutTags.isEmpty()) {
    final ZLTextTreeParagraph booksWithoutTagsParagraph=createParagraph(null);
    insertText(FBTextKind.LIBRARY_AUTHOR_ENTRY,resource.getResource("booksWithoutTags").getValue());
    insertImage(TagInfoImageId);
    myParagraphToTag.put(booksWithoutTagsParagraph,CollectionView.SpecialTagNoTagsBooks);
    addBooks(booksWithoutTags,booksWithoutTagsParagraph);
  }
  final ArrayList tagStack=new ArrayList();
  final HashMap paragraphToTagMap=new HashMap();
  ZLTextTreeParagraph tagParagraph=null;
  for (Iterator it=tagMap.entrySet().iterator(); it.hasNext(); ) {
    final Map.Entry entry=(Map.Entry)it.next();
    final String fullTagName=(String)entry.getKey();
    boolean useExistingTagStack=true;
    for (int index=0, depth=0; index != -1; ++depth) {
      final int newIndex=fullTagName.indexOf('/',index);
      String subTag;
      if (newIndex != -1) {
        subTag=fullTagName.substring(index,newIndex);
        index=newIndex + 1;
      }
 else {
        subTag=fullTagName.substring(index);
        index=-1;
      }
      if (useExistingTagStack) {
        if (tagStack.size() == depth) {
          useExistingTagStack=false;
        }
 else         if (!subTag.equals(tagStack.get(depth))) {
          for (int i=tagStack.size() - depth; i > 0; --i) {
            final String tg=(String)paragraphToTagMap.get(tagParagraph);
            if (tg != null) {
              final ArrayList list=(ArrayList)tagMap.get(tg);
              if (list != null) {
                addBooks(list,tagParagraph);
              }
            }
            tagParagraph=tagParagraph.getParent();
          }
          for (int i=tagStack.size() - 1; i >= depth; --i) {
            tagStack.remove(i);
          }
          useExistingTagStack=false;
        }
      }
      if (!useExistingTagStack) {
        tagStack.add(subTag);
        tagParagraph=createParagraph(tagParagraph);
        myParagraphToTag.put(tagParagraph,(newIndex != -1) ? fullTagName.substring(0,newIndex) : fullTagName);
        insertText(FBTextKind.LIBRARY_AUTHOR_ENTRY,subTag);
        insertImage(TagInfoImageId);
        insertImage(RemoveTagImageId);
      }
    }
    paragraphToTagMap.put(tagParagraph,fullTagName);
  }
  while (tagParagraph != null) {
    final String tg=(String)paragraphToTagMap.get(tagParagraph);
    if (tg != null) {
      addBooks((ArrayList)tagMap.get(tg),tagParagraph);
    }
    tagParagraph=tagParagraph.getParent();
  }
}
