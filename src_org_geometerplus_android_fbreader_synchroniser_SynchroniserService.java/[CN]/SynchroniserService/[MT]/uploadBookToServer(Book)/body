{
  final ZLPhysicalFile file=book.File.getPhysicalFile();
  if (file == null) {
    return;
  }
  final String hash=myCollection.getHash(book);
  if (hash == null) {
    System.err.println("Failed: checksum not computed");
    return;
  }
  if (myHashesFromServer.contains(hash)) {
    System.err.println("HASH ALREADY IN THE TABLE");
    return;
  }
  final Map<String,Object> result=new HashMap<String,Object>();
  final PostRequest verificationRequest=new PostRequest("books.by.hash",Collections.singletonMap("sha1",hash)){
    @Override public void processResponse(    Object response){
      result.put("result",response);
    }
  }
;
  try {
    myNetworkContext.perform(verificationRequest);
  }
 catch (  ZLNetworkException e) {
    e.printStackTrace();
  }
  final String csrfToken=myNetworkContext.getCookieValue(DOMAIN,"csrftoken");
  final Object response=result.get("result");
  try {
    final List<Map<String,Object>> responseList=(List<Map<String,Object>>)response;
    if (responseList.isEmpty()) {
      try {
        final UploadRequest uploadRequest=new UploadRequest(file.javaFile());
        uploadRequest.addHeader("Referer",verificationRequest.getURL());
        uploadRequest.addHeader("X-CSRFToken",csrfToken);
        myNetworkContext.perform(uploadRequest);
      }
 catch (      ZLNetworkException e) {
        e.printStackTrace();
      }
    }
 else {
      for (      Map<String,Object> bookInfo : responseList) {
        System.err.println("BOOK ALREADY UPLOADED: " + bookInfo.get("id"));
        myHashesFromServer.addAll((List<String>)bookInfo.get("hashes"));
      }
    }
  }
 catch (  Exception e) {
    System.err.println("UNEXPECTED RESPONSE: " + response);
  }
}
