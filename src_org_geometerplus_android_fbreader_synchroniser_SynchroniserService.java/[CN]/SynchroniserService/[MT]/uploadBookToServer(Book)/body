{
  final ZLPhysicalFile file=book.File.getPhysicalFile();
  if (file == null) {
    return;
  }
  final String hash=myCollection.getHash(book);
  if (hash == null) {
    System.err.println("Failed: checksum not computed");
    return;
  }
  if (myActualHashesFromServer.contains(hash)) {
    System.err.println("BOOK ALREADY UPLOADED");
    return;
  }
  if (myDeletedHashesFromServer.contains(hash)) {
    System.err.println("BOOK ALREADY UPLOADED AND DELETED");
    return;
  }
  final Map<String,Object> result=new HashMap<String,Object>();
  final PostRequest verificationRequest=new PostRequest("book.status.by.hash",Collections.singletonMap("sha1",hash)){
    @Override public void processResponse(    Object response){
      result.putAll((Map)response);
    }
  }
;
  try {
    myNetworkContext.perform(verificationRequest);
  }
 catch (  ZLNetworkException e) {
    e.printStackTrace();
  }
  final String csrfToken=myNetworkContext.getCookieValue(DOMAIN,"csrftoken");
  try {
    final String status=(String)result.get("status");
    if ("not found".equals(status)) {
      try {
        final UploadRequest uploadRequest=new UploadRequest(file.javaFile());
        uploadRequest.addHeader("Referer",verificationRequest.getURL());
        uploadRequest.addHeader("X-CSRFToken",csrfToken);
        myNetworkContext.perform(uploadRequest);
      }
 catch (      ZLNetworkException e) {
        e.printStackTrace();
      }
    }
 else {
      final List<String> hashes=(List<String>)result.get("hashes");
      if ("found".equals(status)) {
        System.err.println("BOOK ALREADY UPLOADED");
        myActualHashesFromServer.addAll(hashes);
      }
 else {
        System.err.println("BOOK ALREADY UPLOADED AND DELETED");
        myDeletedHashesFromServer.addAll(hashes);
      }
    }
  }
 catch (  Exception e) {
    System.err.println("UNEXPECTED RESPONSE: " + result);
  }
}
