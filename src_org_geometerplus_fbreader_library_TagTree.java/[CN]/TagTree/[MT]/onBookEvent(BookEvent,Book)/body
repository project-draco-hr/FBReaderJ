{
switch (event) {
case Added:
{
      boolean changed=false;
      final List<Tag> bookTags=book.tags();
      if (bookTags.isEmpty()) {
        changed&=Tag.NULL.equals(Tag) && createBookWithAuthorsSubtree(book);
      }
 else {
        for (        Tag t : bookTags) {
          if (Tag.equals(t)) {
            changed&=createBookWithAuthorsSubtree(book);
          }
 else           if (Tag.equals(t.Parent)) {
            changed&=createTagSubtree(t);
          }
        }
      }
      return changed;
    }
case Removed:
  return super.onBookEvent(event,book);
case Updated:
{
  boolean changed=removeBook(book);
  final List<Tag> bookTags=book.tags();
  if (bookTags.isEmpty()) {
    changed&=Tag.NULL.equals(Tag) && createBookWithAuthorsSubtree(book);
  }
 else {
    for (    Tag t : bookTags) {
      if (Tag.equals(t)) {
        changed&=createBookWithAuthorsSubtree(book);
      }
 else       if (Tag.equals(t.Parent)) {
        changed&=createTagSubtree(t);
      }
    }
  }
  return changed;
}
default :
return super.onBookEvent(event,book);
}
}
