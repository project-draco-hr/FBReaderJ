{
  boolean success=false;
  try {
    request.doBefore();
    HttpURLConnection httpConnection=null;
    int response=-1;
    final int retryLimit=6;
    for (int retryCounter=0; retryCounter < retryLimit && (response == -1 || response == 301 || response == 302); ++retryCounter) {
      final URLConnection connection=new URL(request.URL).openConnection();
      if (!(connection instanceof HttpURLConnection)) {
        throw new ZLNetworkException(ZLNetworkException.ERROR_UNSUPPORTED_PROTOCOL);
      }
      httpConnection=(HttpURLConnection)connection;
      setCommonHTTPOptions(request,httpConnection);
      if (request.PostData != null) {
        httpConnection.setRequestMethod("POST");
        httpConnection.setRequestProperty("Content-Length",Integer.toString(request.PostData.getBytes().length));
        httpConnection.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
        httpConnection.setUseCaches(false);
        httpConnection.setDoInput(true);
        httpConnection.setDoOutput(true);
        final OutputStreamWriter writer=new OutputStreamWriter(httpConnection.getOutputStream());
        try {
          writer.write(request.PostData);
          writer.flush();
        }
  finally {
          writer.close();
        }
      }
 else {
        httpConnection.connect();
      }
      response=httpConnection.getResponseCode();
      if (response == 301 || response == 302) {
        request.URL=httpConnection.getHeaderField("Location");
      }
    }
    InputStream stream=null;
    if (response == HttpURLConnection.HTTP_OK) {
      stream=httpConnection.getInputStream();
    }
 else     if (500 <= response && response < 600) {
      stream=httpConnection.getErrorStream();
    }
    if (stream != null) {
      try {
        if ("gzip".equalsIgnoreCase(httpConnection.getContentEncoding())) {
          stream=new GZIPInputStream(stream);
        }
        request.handleStream(stream,httpConnection.getContentLength());
      }
  finally {
        stream.close();
      }
      success=true;
    }
 else {
      System.err.println(request.URL);
      System.err.println("RESPONSE: " + response);
      if (response == HttpURLConnection.HTTP_UNAUTHORIZED) {
        throw new ZLNetworkException(ZLNetworkException.ERROR_AUTHENTICATION_FAILED);
      }
 else       if (response >= 400) {
        throw new ZLNetworkException(true,httpConnection.getResponseMessage());
      }
 else {
        throw new ZLNetworkException(ZLNetworkException.ERROR_SOMETHING_WRONG,ZLNetworkUtil.hostFromUrl(request.URL));
      }
    }
  }
 catch (  SSLHandshakeException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_SSL_CONNECT,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  SSLKeyException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_SSL_BAD_KEY,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  SSLPeerUnverifiedException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_SSL_PEER_UNVERIFIED,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  SSLProtocolException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_SSL_PROTOCOL_ERROR,ex);
  }
catch (  SSLException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_SSL_SUBSYSTEM,ex);
  }
catch (  ConnectException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_CONNECTION_REFUSED,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  NoRouteToHostException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_HOST_CANNOT_BE_REACHED,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  UnknownHostException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_RESOLVE_HOST,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  MalformedURLException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_INVALID_URL,ex);
  }
catch (  SocketTimeoutException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_TIMEOUT,ex);
  }
catch (  IOException ex) {
    ex.printStackTrace();
    throw new ZLNetworkException(ZLNetworkException.ERROR_SOMETHING_WRONG,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
 finally {
    request.doAfter(success);
  }
}
