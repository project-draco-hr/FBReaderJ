{
  boolean success=false;
  try {
    final String error=doBeforeRequest(request);
    if (error != null) {
      return error;
    }
    HttpURLConnection httpConnection=null;
    int response=-1;
    for (int retryCounter=0; retryCounter < 3 && response == -1; ++retryCounter) {
      final URL url=new URL(request.URL);
      final URLConnection connection=url.openConnection();
      if (!(connection instanceof HttpURLConnection)) {
        return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_UNSUPPORTED_PROTOCOL);
      }
      httpConnection=(HttpURLConnection)connection;
      String err=setCommonHTTPOptions(request,httpConnection);
      if (err != null) {
        return err;
      }
      httpConnection.connect();
      response=httpConnection.getResponseCode();
    }
    if (response == HttpURLConnection.HTTP_OK) {
      InputStream stream=httpConnection.getInputStream();
      try {
        final String err=request.doHandleStream(httpConnection,stream);
        if (err != null) {
          return err;
        }
      }
  finally {
        stream.close();
      }
      success=true;
    }
 else {
      if (response == HttpURLConnection.HTTP_UNAUTHORIZED) {
        return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_AUTHENTICATION_FAILED);
      }
 else {
        return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_SOMETHING_WRONG,ZLNetworkUtil.hostFromUrl(request.URL));
      }
    }
  }
 catch (  SSLHandshakeException ex) {
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_SSL_CONNECT,ZLNetworkUtil.hostFromUrl(request.URL));
  }
catch (  SSLKeyException ex) {
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_SSL_BAD_KEY,ZLNetworkUtil.hostFromUrl(request.URL));
  }
catch (  SSLPeerUnverifiedException ex) {
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_SSL_PEER_UNVERIFIED,ZLNetworkUtil.hostFromUrl(request.URL));
  }
catch (  SSLProtocolException ex) {
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_SSL_PROTOCOL_ERROR);
  }
catch (  SSLException ex) {
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_SSL_SUBSYSTEM);
  }
catch (  ConnectException ex) {
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_CONNECTION_REFUSED,ZLNetworkUtil.hostFromUrl(request.URL));
  }
catch (  NoRouteToHostException ex) {
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_HOST_CANNOT_BE_REACHED,ZLNetworkUtil.hostFromUrl(request.URL));
  }
catch (  UnknownHostException ex) {
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_RESOLVE_HOST,ZLNetworkUtil.hostFromUrl(request.URL));
  }
catch (  MalformedURLException ex) {
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_INVALID_URL);
  }
catch (  SocketTimeoutException ex) {
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_TIMEOUT);
  }
catch (  IOException ex) {
    ex.printStackTrace();
    return ZLNetworkErrors.errorMessage(ZLNetworkErrors.ERROR_SOMETHING_WRONG,ZLNetworkUtil.hostFromUrl(request.URL));
  }
 finally {
    final String err=request.doAfter(success);
    if (success && err != null) {
      return err;
    }
  }
  return null;
}
