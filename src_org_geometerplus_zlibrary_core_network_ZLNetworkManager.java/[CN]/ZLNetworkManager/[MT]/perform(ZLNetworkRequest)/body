{
  boolean success=false;
  DefaultHttpClient httpClient=null;
  HttpEntity entity=null;
  try {
    final HttpContext httpContext=new BasicHttpContext();
    httpContext.setAttribute(ClientContext.COOKIE_STORE,myCookieStore);
    request.doBefore();
    final HttpParams params=new BasicHttpParams();
    HttpConnectionParams.setSoTimeout(params,30000);
    HttpConnectionParams.setConnectionTimeout(params,15000);
    httpClient=new DefaultHttpClient(params);
    final HttpRequestBase httpRequest;
    if (request.PostData != null) {
      httpRequest=new HttpPost(request.URL);
      ((HttpPost)httpRequest).setEntity(new StringEntity(request.PostData,"utf-8"));
    }
 else     if (!request.PostParameters.isEmpty()) {
      httpRequest=new HttpPost(request.URL);
      final List<BasicNameValuePair> list=new ArrayList<BasicNameValuePair>(request.PostParameters.size());
      for (      Map.Entry<String,String> entry : request.PostParameters.entrySet()) {
        list.add(new BasicNameValuePair(entry.getKey(),entry.getValue()));
      }
      ((HttpPost)httpRequest).setEntity(new UrlEncodedFormEntity(list,"utf-8"));
    }
 else {
      httpRequest=new HttpGet(request.URL);
    }
    httpRequest.setHeader("User-Agent",ZLNetworkUtil.getUserAgent());
    httpRequest.setHeader("Accept-Encoding","gzip");
    httpRequest.setHeader("Accept-Language",Locale.getDefault().getLanguage());
    httpClient.setCredentialsProvider(new MyCredentialsProvider(httpRequest,request.isQuiet()));
    HttpResponse response=null;
    IOException lastException=null;
    for (int retryCounter=0; retryCounter < 3 && entity == null; ++retryCounter) {
      try {
        response=httpClient.execute(httpRequest,httpContext);
        entity=response.getEntity();
        lastException=null;
        if (response.getStatusLine().getStatusCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
          if (response.containsHeader("Www-Authenticate")) {
            Header h=response.getFirstHeader("Www-Authenticate");
            for (            HeaderElement he : h.getElements()) {
              if (he.getName().equalsIgnoreCase("digest realm") || he.getName().equalsIgnoreCase("basic realm")) {
                String realm=he.getValue();
                URI uri=httpRequest.getURI();
                String host=uri.getHost();
                String scheme="BASIC";
                if (he.getName().equalsIgnoreCase("digest realm")) {
                  scheme="DIGEST";
                }
                int port=uri.getPort();
                if (port == -1) {
                  port=80;
                }
                AuthScopeRepresentation scope=new AuthScopeRepresentation(host,port,realm,scheme);
                if (myCredentialsCreator.removeCredentials(scope)) {
                  entity=null;
                }
              }
            }
          }
        }
      }
 catch (      IOException e) {
        lastException=e;
      }
    }
    if (lastException != null) {
      throw lastException;
    }
    final int responseCode=response.getStatusLine().getStatusCode();
    InputStream stream=null;
    if (entity != null && responseCode == HttpURLConnection.HTTP_OK) {
      stream=entity.getContent();
    }
    if (stream != null) {
      try {
        final Header encoding=entity.getContentEncoding();
        if (encoding != null && "gzip".equalsIgnoreCase(encoding.getValue())) {
          stream=new GZIPInputStream(stream);
        }
        request.handleStream(stream,(int)entity.getContentLength());
      }
  finally {
        stream.close();
      }
      success=true;
    }
 else {
      if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
        throw new ZLNetworkException(ZLNetworkException.ERROR_AUTHENTICATION_FAILED);
      }
 else {
        throw new ZLNetworkException(true,response.getStatusLine().toString());
      }
    }
  }
 catch (  ZLNetworkException e) {
    throw e;
  }
catch (  IOException e) {
    e.printStackTrace();
    final String code;
    if (e instanceof UnknownHostException) {
      code=ZLNetworkException.ERROR_RESOLVE_HOST;
    }
 else {
      code=ZLNetworkException.ERROR_CONNECT_TO_HOST;
    }
    throw new ZLNetworkException(code,ZLNetworkUtil.hostFromUrl(request.URL),e);
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new ZLNetworkException(true,e.getMessage(),e);
  }
 finally {
    request.doAfter(success);
    if (httpClient != null) {
      httpClient.getConnectionManager().shutdown();
    }
    if (entity != null) {
      try {
        entity.consumeContent();
      }
 catch (      IOException e) {
      }
    }
  }
}
