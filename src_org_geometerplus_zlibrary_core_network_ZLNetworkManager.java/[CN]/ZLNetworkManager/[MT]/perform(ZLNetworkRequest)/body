{
  boolean success=false;
  DefaultHttpClient httpClient=null;
  HttpEntity entity=null;
  try {
    request.doBefore();
    httpClient=new DefaultHttpClient();
    final HttpRequestBase httpRequest;
    if (request.PostData != null) {
      httpRequest=new HttpPost(request.URL);
      ((HttpPost)httpRequest).setEntity(new StringEntity(request.PostData,"utf-8"));
    }
 else     if (!request.PostParameters.isEmpty()) {
      httpRequest=new HttpPost(request.URL);
      final List<BasicNameValuePair> list=new ArrayList<BasicNameValuePair>(request.PostParameters.size());
      ((HttpPost)httpRequest).setEntity(new UrlEncodedFormEntity(list,"utf-8"));
    }
 else {
      httpRequest=new HttpGet(request.URL);
    }
    setCommonHTTPOptions(httpRequest);
    httpClient.setCredentialsProvider(new MyCredentialsProvider(httpRequest));
    HttpResponse response=null;
    for (int retryCounter=0; retryCounter < 3 && entity == null; ++retryCounter) {
      response=httpClient.execute(httpRequest,myHttpContext);
      entity=response.getEntity();
    }
    final int responseCode=response.getStatusLine().getStatusCode();
    InputStream stream=null;
    if (entity != null && responseCode == HttpURLConnection.HTTP_OK) {
      stream=entity.getContent();
    }
    if (stream != null) {
      try {
        final Header encoding=entity.getContentEncoding();
        if (encoding != null && "gzip".equalsIgnoreCase(encoding.getValue())) {
          stream=new GZIPInputStream(stream);
        }
        request.handleStream(stream,(int)entity.getContentLength());
      }
  finally {
        stream.close();
      }
      success=true;
    }
 else {
      if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
        throw new ZLNetworkException(ZLNetworkException.ERROR_AUTHENTICATION_FAILED);
      }
 else {
        throw new ZLNetworkException(true,response.getStatusLine().toString());
      }
    }
  }
 catch (  SSLHandshakeException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_SSL_CONNECT,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  SSLKeyException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_SSL_BAD_KEY,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  SSLPeerUnverifiedException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_SSL_PEER_UNVERIFIED,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  SSLProtocolException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_SSL_PROTOCOL_ERROR,ex);
  }
catch (  SSLException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_SSL_SUBSYSTEM,ex);
  }
catch (  ConnectException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_CONNECTION_REFUSED,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  NoRouteToHostException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_HOST_CANNOT_BE_REACHED,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  UnknownHostException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_RESOLVE_HOST,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
catch (  SocketTimeoutException ex) {
    throw new ZLNetworkException(ZLNetworkException.ERROR_TIMEOUT,ex);
  }
catch (  IOException ex) {
    ex.printStackTrace();
    throw new ZLNetworkException(ZLNetworkException.ERROR_SOMETHING_WRONG,ZLNetworkUtil.hostFromUrl(request.URL),ex);
  }
 finally {
    request.doAfter(success);
    if (httpClient != null) {
      httpClient.getConnectionManager().shutdown();
    }
    if (entity != null) {
      try {
        entity.consumeContent();
      }
 catch (      IOException e) {
      }
    }
  }
}
