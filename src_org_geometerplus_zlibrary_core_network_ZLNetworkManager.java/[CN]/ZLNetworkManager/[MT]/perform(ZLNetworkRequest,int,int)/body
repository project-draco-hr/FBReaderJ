{
  boolean success=false;
  DefaultHttpClient httpClient=null;
  HttpEntity entity=null;
  try {
    final HttpContext httpContext=new BasicHttpContext();
    httpContext.setAttribute(ClientContext.COOKIE_STORE,myCookieStore);
    request.doBefore();
    final HttpParams params=new BasicHttpParams();
    HttpConnectionParams.setSoTimeout(params,socketTimeout);
    HttpConnectionParams.setConnectionTimeout(params,connectionTimeout);
    httpClient=new DefaultHttpClient(params){
      protected AuthenticationHandler createTargetAuthenticationHandler(){
        final AuthenticationHandler base=super.createTargetAuthenticationHandler();
        return new AuthenticationHandler(){
          public Map<String,Header> getChallenges(          HttpResponse response,          HttpContext context) throws MalformedChallengeException {
            return base.getChallenges(response,context);
          }
          public boolean isAuthenticationRequested(          HttpResponse response,          HttpContext context){
            return base.isAuthenticationRequested(response,context);
          }
          public AuthScheme selectScheme(          Map<String,Header> challenges,          HttpResponse response,          HttpContext context) throws AuthenticationException {
            try {
              return base.selectScheme(challenges,response,context);
            }
 catch (            AuthenticationException e) {
              final Header bearerHeader=challenges.get("bearer");
              if (bearerHeader != null) {
                throw new BearerAuthenticationException(bearerHeader.getValue());
              }
              throw e;
            }
          }
        }
;
      }
    }
;
    final HttpRequestBase httpRequest;
    if (request.PostData != null) {
      httpRequest=new HttpPost(request.URL);
      ((HttpPost)httpRequest).setEntity(new StringEntity(request.PostData,"utf-8"));
    }
 else     if (!request.PostParameters.isEmpty()) {
      httpRequest=new HttpPost(request.URL);
      final List<BasicNameValuePair> list=new ArrayList<BasicNameValuePair>(request.PostParameters.size());
      for (      Map.Entry<String,String> entry : request.PostParameters.entrySet()) {
        list.add(new BasicNameValuePair(entry.getKey(),entry.getValue()));
      }
      ((HttpPost)httpRequest).setEntity(new UrlEncodedFormEntity(list,"utf-8"));
    }
 else {
      httpRequest=new HttpGet(request.URL);
    }
    httpRequest.setHeader("User-Agent",ZLNetworkUtil.getUserAgent());
    if (!request.isQuiet()) {
      httpRequest.setHeader("X-Accept-Auto-Login","True");
    }
    httpRequest.setHeader("Accept-Encoding","gzip");
    httpRequest.setHeader("Accept-Language",Locale.getDefault().getLanguage());
    for (    Map.Entry<String,String> header : request.Headers.entrySet()) {
      httpRequest.setHeader(header.getKey(),header.getValue());
    }
    httpClient.setCredentialsProvider(new MyCredentialsProvider(httpRequest,request.isQuiet()));
    HttpResponse response=null;
    IOException lastException=null;
    for (int retryCounter=0; retryCounter < 3 && entity == null; ++retryCounter) {
      try {
        response=execute(httpClient,httpRequest,httpContext);
        entity=response.getEntity();
        lastException=null;
        if (response.getStatusLine().getStatusCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
          final AuthState state=(AuthState)httpContext.getAttribute(ClientContext.TARGET_AUTH_STATE);
          if (state != null) {
            final AuthScopeKey key=new AuthScopeKey(state.getAuthScope());
            if (myCredentialsCreator.removeCredentials(key)) {
              entity=null;
            }
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
        lastException=e;
      }
    }
    if (lastException != null) {
      throw lastException;
    }
    final int responseCode=response.getStatusLine().getStatusCode();
    InputStream stream=null;
    if (entity != null && (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_PARTIAL)) {
      stream=entity.getContent();
    }
    if (stream != null) {
      try {
        final Header encoding=entity.getContentEncoding();
        if (encoding != null && "gzip".equalsIgnoreCase(encoding.getValue())) {
          stream=new GZIPInputStream(stream);
        }
        request.handleStream(stream,(int)entity.getContentLength());
      }
  finally {
        stream.close();
      }
      success=true;
    }
 else {
      if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
        throw new ZLNetworkException(ZLNetworkException.ERROR_AUTHENTICATION_FAILED);
      }
 else {
        throw new ZLNetworkException(true,response.getStatusLine().toString());
      }
    }
  }
 catch (  ZLNetworkException e) {
    throw e;
  }
catch (  IOException e) {
    e.printStackTrace();
    final String code;
    if (e instanceof UnknownHostException) {
      code=ZLNetworkException.ERROR_RESOLVE_HOST;
    }
 else {
      code=ZLNetworkException.ERROR_CONNECT_TO_HOST;
    }
    throw new ZLNetworkException(code,ZLNetworkUtil.hostFromUrl(request.URL),e);
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new ZLNetworkException(true,e.getMessage(),e);
  }
 finally {
    request.doAfter(success);
    if (httpClient != null) {
      httpClient.getConnectionManager().shutdown();
    }
    if (entity != null) {
      try {
        entity.consumeContent();
      }
 catch (      IOException e) {
      }
    }
  }
}
