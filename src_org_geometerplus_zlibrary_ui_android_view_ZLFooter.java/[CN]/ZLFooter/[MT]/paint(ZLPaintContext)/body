{
  boolean infoChanged=false;
  final ZLTextView view=(ZLTextView)ZLApplication.Instance().getCurrentView();
  final ZLColor bgColor=view.getBackgroundColor();
  final ZLColor fgColor=view.getTextColor(FBHyperlinkType.NONE);
  if (!fgColor.equals(myLastFgColor) || !bgColor.equals(myLastBgColor)) {
    infoChanged=true;
    myLastFgColor=fgColor;
    myLastBgColor=bgColor;
  }
  final int width=context.getWidth();
  final int height=view.getFooterArea().getHeight();
  final int lineWidth=height <= 10 ? 1 : 2;
  final int delta=height <= 10 ? 0 : 1;
  context.setFont("sans-serif",height <= 10 ? height + 3 : height + 1,height > 10,false,false);
  if (height != myLastHeight) {
    myLastHeight=height;
    infoChanged=true;
  }
  if (width != myLastWidth) {
    myLastWidth=width;
    infoChanged=true;
  }
  final int pagesProgress=view.computeCurrentPage();
  final int bookLength=view.computePageNumber();
  final FBReaderApp fbReader=(FBReaderApp)FBReaderApp.Instance();
  final StringBuilder info=new StringBuilder();
  if (fbReader.FooterShowProgress.getValue()) {
    info.append(pagesProgress);
    info.append("/");
    info.append(bookLength);
  }
  if (fbReader.FooterShowBattery.getValue()) {
    if (info.length() > 0) {
      info.append(" ");
    }
    info.append(ZLApplication.Instance().getBatteryLevel());
    info.append("%");
  }
  if (fbReader.FooterShowClock.getValue()) {
    if (info.length() > 0) {
      info.append(" ");
    }
    Date date=new Date();
    info.append(String.format("%02d:%02d",date.getHours(),date.getMinutes()));
  }
  final String infoString=info.toString();
  if (!infoString.equals(myInfoString)) {
    myInfoString=infoString;
    infoChanged=true;
  }
  if (infoChanged) {
    final int infoWidth=context.getStringWidth(infoString);
    context.clear(bgColor);
    context.setTextColor(fgColor);
    context.drawString(width - infoWidth,height - delta,infoString);
    myGaugeRect.set(0,0,width - ((infoWidth == 0) ? 0 : infoWidth + 10),height);
    myGaugeRect.right-=(1 - delta);
    myGaugeRect.inset(1 + delta,1 + delta);
    myGaugeStart=myGaugeRect.left;
    myGaugeEnd=myGaugeRect.right;
    myGaugeRect.inset(2 + delta,2 + delta);
    myGaugeRect.right=myGaugeRect.left + (int)((float)myGaugeRect.width() * pagesProgress / bookLength);
    context.setLineColor(fgColor);
    context.setLineWidth(lineWidth);
    final int gaugeRight=width - ((infoWidth == 0) ? 0 : infoWidth + 10) - 2;
    context.drawLine(lineWidth,lineWidth,lineWidth,height - lineWidth);
    context.drawLine(lineWidth,height - lineWidth,gaugeRight,height - lineWidth);
    context.drawLine(gaugeRight,height - lineWidth,gaugeRight,lineWidth);
    context.drawLine(gaugeRight,lineWidth,lineWidth,lineWidth);
    final int gaugeInternalRight=1 + 2 * lineWidth + (int)(1.0 * (gaugeRight - 2 - 3 * lineWidth) * pagesProgress / bookLength);
    context.drawLine(1 + 2 * lineWidth,1 + 2 * lineWidth,1 + 2 * lineWidth,height - 1 - 2 * lineWidth);
    context.drawLine(1 + 2 * lineWidth,height - 1 - 2 * lineWidth,gaugeInternalRight,height - 1 - 2 * lineWidth);
    context.drawLine(gaugeInternalRight,height - 1 - 2 * lineWidth,gaugeInternalRight,1 + 2 * lineWidth);
    context.drawLine(gaugeInternalRight,1 + 2 * lineWidth,1 + 2 * lineWidth,1 + 2 * lineWidth);
  }
}
