{
  try {
    final Map<String,Info> actualServerInfos=new HashMap<String,Info>();
    final Set<String> deletedOnServerUids=new HashSet<String>();
    JsonRequest2 infoRequest=null;
    final Map<String,Object> data=new HashMap<String,Object>();
    final int pageSize=100;
    data.put("page_size",pageSize);
    final Map<String,Object> responseMap=new HashMap<String,Object>();
    for (int pageNo=0; ; ++pageNo) {
      data.put("page_no",pageNo);
      data.put("timestamp",System.currentTimeMillis());
      infoRequest=new JsonRequest2(SyncOptions.BASE_URL + "sync/bookmarks.lite.paged",data){
        @Override public void processResponse(        Object response){
          System.err.println("BMK RESPONSE = " + response);
          responseMap.putAll((Map<String,Object>)response);
        }
      }
;
      context.perform(infoRequest);
      for (      Map<String,Object> info : (List<Map<String,Object>>)responseMap.get("actual")) {
        final Info bmk=new Info(info);
        actualServerInfos.put(bmk.Uid,bmk);
      }
      deletedOnServerUids.addAll((List<String>)responseMap.get("deleted"));
      if ((Long)responseMap.get("count") <= (pageNo + 1L) * pageSize) {
        break;
      }
    }
    final long serverStyleTimestamp=(Long)responseMap.get("style_timestamp");
    System.err.println("BMK STYLE TIMESTAMP = " + serverStyleTimestamp);
    System.err.println("BMK ACTUAL = " + actualServerInfos);
    System.err.println("BMK DELETED = " + deletedOnServerUids);
    final Set<String> deletedOnClientUids=new HashSet<String>(collection.deletedBookmarkUids());
    if (!deletedOnClientUids.isEmpty()) {
      final List<String> toPurge=new ArrayList<String>(deletedOnClientUids);
      toPurge.removeAll(actualServerInfos.keySet());
      if (!toPurge.isEmpty()) {
        collection.purgeBookmarks(toPurge);
      }
    }
    final List<Bookmark> toSendToServer=new LinkedList<Bookmark>();
    final List<Bookmark> toDeleteOnClient=new LinkedList<Bookmark>();
    final List<Bookmark> toUpdateOnServer=new LinkedList<Bookmark>();
    final List<Bookmark> toUpdateOnClient=new LinkedList<Bookmark>();
    final List<String> toGetFromServer=new LinkedList<String>();
    final List<String> toDeleteOnServer=new LinkedList<String>();
    for (BookmarkQuery q=new BookmarkQuery(20); ; q=q.next()) {
      final List<Bookmark> bmks=collection.bookmarks(q);
      if (bmks.isEmpty()) {
        break;
      }
      for (      Bookmark b : bmks) {
        final Info info=actualServerInfos.remove(b.Uid);
        if (info != null) {
          if (info.VersionUid == null) {
            if (b.getVersionUid() != null) {
              toUpdateOnServer.add(b);
            }
          }
 else {
            if (b.getVersionUid() == null) {
              toUpdateOnClient.add(b);
            }
 else             if (!info.VersionUid.equals(b.getVersionUid())) {
              final long ts=b.getDate(Bookmark.DateType.Modification).getTime();
              if (info.ModificationTimestamp <= ts) {
                toUpdateOnServer.add(b);
              }
 else {
                toUpdateOnClient.add(b);
              }
            }
          }
        }
 else         if (deletedOnServerUids.contains(b.Uid)) {
          toDeleteOnClient.add(b);
        }
 else {
          toSendToServer.add(b);
        }
      }
    }
    final Set<String> leftUids=actualServerInfos.keySet();
    if (!leftUids.isEmpty()) {
      toGetFromServer.addAll(leftUids);
      toGetFromServer.removeAll(deletedOnClientUids);
      toDeleteOnServer.addAll(leftUids);
      toDeleteOnServer.retainAll(deletedOnClientUids);
    }
    final BooksByHash booksByHash=new BooksByHash(collection);
    for (ListIterator<String> iter=toGetFromServer.listIterator(); iter.hasNext(); ) {
      final Info info=actualServerInfos.get(iter.next());
      if (booksByHash.getBook(info.BookHashes) == null) {
        iter.remove();
      }
    }
    System.err.println("BMK TO SEND TO SERVER = " + ids(toSendToServer));
    System.err.println("BMK TO DELETE ON SERVER = " + toDeleteOnServer);
    System.err.println("BMK TO DELETE ON CLIENT = " + ids(toDeleteOnClient));
    System.err.println("BMK TO UPDATE ON SERVER = " + ids(toUpdateOnServer));
    System.err.println("BMK TO UPDATE ON CLIENT = " + ids(toUpdateOnClient));
    System.err.println("BMK TO GET FROM SERVER = " + toGetFromServer);
    for (    Bookmark b : toDeleteOnClient) {
      collection.deleteBookmark(b);
    }
    if (!toGetFromServer.isEmpty()) {
      context.perform(new JsonRequest2(SyncOptions.BASE_URL + "sync/bookmarks",fullRequestData(toGetFromServer)){
        @Override public void processResponse(        Object response){
          for (          Map<String,Object> info : (List<Map<String,Object>>)response) {
            final Bookmark bookmark=bookmarkFromData(info,booksByHash);
            if (bookmark != null) {
              collection.saveBookmark(bookmark);
            }
          }
        }
      }
);
    }
    if (!toUpdateOnClient.isEmpty()) {
      final Map<String,Bookmark> bookmarksMap=new HashMap<String,Bookmark>();
      for (      Bookmark b : toUpdateOnClient) {
        bookmarksMap.put(b.Uid,b);
      }
      context.perform(new JsonRequest2(SyncOptions.BASE_URL + "sync/bookmarks",fullRequestData(ids(toUpdateOnClient))){
        @Override public void processResponse(        Object response){
          for (          Map<String,Object> info : (List<Map<String,Object>>)response) {
            final Bookmark bookmark=bookmarkToUpdate(info,bookmarksMap);
            if (bookmark != null) {
              collection.saveBookmark(bookmark);
            }
          }
        }
      }
);
    }
class HashCache {
      final Map<Long,String> myHashByBookId=new HashMap<Long,String>();
      String getHash(      Bookmark b){
        String hash=myHashByBookId.get(b.BookId);
        if (hash == null) {
          final Book book=collection.getBookById(b.BookId);
          hash=book != null ? collection.getHash(book,false) : "";
          myHashByBookId.put(b.BookId,hash);
        }
        return "".equals(hash) ? null : hash;
      }
    }
    ;
    final HashCache cache=new HashCache();
    final List<Request> requests=new ArrayList<Request>();
    for (    Bookmark b : toSendToServer) {
      final String hash=cache.getHash(b);
      if (hash != null) {
        requests.add(new AddRequest(b,hash));
      }
    }
    for (    Bookmark b : toUpdateOnServer) {
      final String hash=cache.getHash(b);
      if (hash != null) {
        requests.add(new UpdateRequest(b,hash));
      }
    }
    for (    String uid : toDeleteOnServer) {
      requests.add(new DeleteRequest(uid));
    }
    final List<Map<String,Object>> stylesToSend=new ArrayList<Map<String,Object>>();
    for (    HighlightingStyle style : collection.highlightingStyles()) {
      if (style.LastUpdateTimestamp <= serverStyleTimestamp) {
        continue;
      }
      final Map<String,Object> styleMap=new HashMap<String,Object>();
      styleMap.put("style_id",style.Id);
      styleMap.put("timestamp",style.LastUpdateTimestamp);
      styleMap.put("name",style.getName());
      final ZLColor bg=style.getBackgroundColor();
      if (bg != null) {
        styleMap.put("bg_color",bg.intValue());
      }
      final ZLColor fg=style.getForegroundColor();
      if (fg != null) {
        styleMap.put("fg_color",fg.intValue());
      }
      stylesToSend.add(styleMap);
    }
    if (!requests.isEmpty() || !stylesToSend.isEmpty()) {
      final Map<String,Object> allDataToSend=new HashMap<String,Object>();
      allDataToSend.put("requests",requests);
      allDataToSend.put("timestamp",System.currentTimeMillis());
      allDataToSend.put("styles",stylesToSend);
      System.err.println("BMK SENDING: " + allDataToSend);
      final JsonRequest2 serverUpdateRequest=new JsonRequest2(SyncOptions.BASE_URL + "sync/update.bookmarks",allDataToSend){
        @Override public void processResponse(        Object response){
          System.err.println("BMK UPDATED: " + response);
        }
      }
;
      final String csrfToken=context.getCookieValue(SyncOptions.DOMAIN,"csrftoken");
      serverUpdateRequest.addHeader("Referer",infoRequest.getURL());
      serverUpdateRequest.addHeader("X-CSRFToken",csrfToken);
      context.perform(serverUpdateRequest);
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}
