{
  if (!ignoreSize && (maxWidth == 0 || maxHeight == 0)) {
    return null;
  }
  if (maxWidth != myLastRequestedWidth || maxHeight != myLastRequestedHeight) {
    if (myBitmap != null) {
      myBitmap.recycle();
      myBitmap=null;
    }
    try {
      final BitmapFactory.Options options=new BitmapFactory.Options();
      if (myRealWidth <= 0) {
        options.inJustDecodeBounds=true;
        decodeWithOptions(options);
        myRealWidth=options.outWidth;
        myRealHeight=options.outHeight;
      }
      options.inJustDecodeBounds=false;
      int coefficient=1;
      if (!ignoreSize) {
        while ((myRealHeight > maxHeight * coefficient) || (myRealWidth > maxWidth * coefficient)) {
          coefficient*=2;
        }
      }
      options.inSampleSize=coefficient;
      myBitmap=decodeWithOptions(options);
      if (myBitmap != null) {
        if (!ignoreSize) {
          final int bWidth=myBitmap.getWidth();
          final int bHeight=myBitmap.getHeight();
          if (bWidth > 0 && bHeight > 0 && (bWidth > maxWidth || bHeight > maxHeight)) {
            final int w, h;
            if (bWidth * maxHeight > bHeight * maxWidth) {
              w=maxWidth;
              h=bHeight * maxWidth / bWidth;
            }
 else {
              h=maxHeight;
              w=bWidth * maxHeight / bHeight;
            }
            myBitmap=Bitmap.createScaledBitmap(myBitmap,w,h,false);
          }
        }
        myLastRequestedWidth=maxWidth;
        myLastRequestedHeight=maxHeight;
      }
    }
 catch (    OutOfMemoryError e) {
      e.printStackTrace();
    }
  }
  return myBitmap;
}
