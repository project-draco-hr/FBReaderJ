{
  final int subtreesSize=parent.subTrees().size();
  if (position == -1) {
    position=subtreesSize;
  }
 else   if (position < 0 || position > subtreesSize) {
    throw new IndexOutOfBoundsException("`position` value equals " + position + " but must be in range [0; "+ subtreesSize+ "]");
  }
  if (item instanceof NetworkCatalogItem) {
    NetworkCatalogItem catalogItem=(NetworkCatalogItem)item;
    if (catalogItem.getVisibility() == ZLBoolean3.B3_FALSE) {
      return null;
    }
    NetworkCatalogTree tree=new NetworkCatalogTree(parent,catalogItem,position);
    catalogItem.onDisplayItem();
    return tree;
  }
 else   if (item instanceof NetworkBookItem) {
    if (position != subtreesSize) {
      throw new RuntimeException("Unable to insert NetworkBookItem to the middle of the catalog");
    }
    final NetworkBookItem book=(NetworkBookItem)item;
    final int flags=parent.Item.Flags;
    final boolean showAuthors=(flags & NetworkCatalogItem.FLAG_SHOW_AUTHOR) != 0;
switch (flags & NetworkCatalogItem.FLAGS_GROUP) {
default :
      return new NetworkBookTree(parent,book,position,showAuthors);
case NetworkCatalogItem.FLAG_GROUP_BY_SERIES:
    if (book.SeriesTitle == null) {
      return new NetworkBookTree(parent,book,position,showAuthors);
    }
 else {
      final NetworkTree previous=position > 0 ? (NetworkTree)parent.subTrees().get(position - 1) : null;
      NetworkSeriesTree seriesTree=null;
      if (previous instanceof NetworkSeriesTree) {
        seriesTree=(NetworkSeriesTree)previous;
        if (!book.SeriesTitle.equals(seriesTree.SeriesTitle)) {
          seriesTree=null;
        }
      }
      if (seriesTree == null) {
        seriesTree=new NetworkSeriesTree(parent,book.SeriesTitle,position,showAuthors);
      }
      return new NetworkBookTree(seriesTree,book,showAuthors);
    }
case NetworkCatalogItem.FLAG_GROUP_MORE_THAN_1_BOOK_BY_SERIES:
  if (position > 0 && book.SeriesTitle != null) {
    final NetworkTree previous=(NetworkTree)parent.subTrees().get(position - 1);
    if (previous instanceof NetworkSeriesTree) {
      final NetworkSeriesTree seriesTree=(NetworkSeriesTree)previous;
      if (book.SeriesTitle.equals(seriesTree.SeriesTitle)) {
        return new NetworkBookTree(seriesTree,book,showAuthors);
      }
    }
 else {
      final NetworkBookItem previousBook=((NetworkBookTree)previous).Book;
      if (book.SeriesTitle.equals(previousBook.SeriesTitle)) {
        previous.removeSelf();
        final NetworkSeriesTree seriesTree=new NetworkSeriesTree(parent,book.SeriesTitle,position - 1,showAuthors);
        new NetworkBookTree(seriesTree,previousBook,showAuthors);
        return new NetworkBookTree(seriesTree,book,showAuthors);
      }
    }
  }
return new NetworkBookTree(parent,book,position,showAuthors);
case NetworkCatalogItem.FLAG_GROUP_BY_AUTHOR:
if (book.Authors.isEmpty()) {
return new NetworkBookTree(parent,book,position,showAuthors);
}
 else {
final NetworkBookItem.AuthorData author=book.Authors.get(0);
final NetworkTree previous=position > 0 ? (NetworkTree)parent.subTrees().get(position - 1) : null;
NetworkAuthorTree authorTree=null;
if (previous instanceof NetworkAuthorTree) {
  authorTree=(NetworkAuthorTree)previous;
  if (!author.equals(authorTree.Author)) {
    authorTree=null;
  }
}
if (authorTree == null) {
  authorTree=new NetworkAuthorTree(parent,author);
}
return new NetworkBookTree(authorTree,book,showAuthors);
}
}
}
 else if (item instanceof TopUpItem) {
return new TopUpTree(parent,(TopUpItem)item);
}
return null;
}
