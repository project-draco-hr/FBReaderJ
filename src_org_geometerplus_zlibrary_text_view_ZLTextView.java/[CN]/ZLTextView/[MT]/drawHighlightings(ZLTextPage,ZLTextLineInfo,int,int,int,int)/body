{
  if (from == to) {
    return;
  }
  final LinkedList<ZLTextHighlighting> hilites=new LinkedList<ZLTextHighlighting>();
  if (mySelection.intersects(page)) {
    hilites.add(mySelection);
  }
synchronized (myHighlightings) {
    for (    ZLTextHighlighting h : myHighlightings) {
      if (h.intersects(page)) {
        hilites.add(h);
      }
    }
  }
  if (hilites.isEmpty()) {
    return;
  }
  final ZLTextElementArea fromArea=page.TextElementMap.get(from);
  final ZLTextElementArea toArea=page.TextElementMap.get(to - 1);
  for (  ZLTextHighlighting h : hilites) {
    final ZLColor bgColor=h.getBackgroundColor();
    if (bgColor == null) {
      continue;
    }
    final ZLTextElementArea selectionStartArea=h.getStartArea(page);
    if (selectionStartArea == null || selectionStartArea.compareTo(toArea) > 0) {
      continue;
    }
    final ZLTextElementArea selectionEndArea=h.getEndArea(page);
    if (selectionEndArea == null || selectionEndArea.compareTo(fromArea) < 0) {
      continue;
    }
    final int top=y + 1;
    int left, right, bottom=y + info.Height + info.Descent;
    if (selectionStartArea.compareTo(fromArea) < 0) {
      left=x;
    }
 else {
      left=selectionStartArea.XStart;
    }
    if (selectionEndArea.compareTo(toArea) > 0) {
      right=x + page.getTextWidth() - 1;
      bottom+=info.VSpaceAfter;
    }
 else {
      right=selectionEndArea.XEnd;
    }
    getContext().setFillColor(bgColor);
    getContext().fillRectangle(left,top,right,bottom);
  }
}
