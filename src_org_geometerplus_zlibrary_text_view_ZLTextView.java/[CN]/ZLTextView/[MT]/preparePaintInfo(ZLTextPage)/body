{
  page.setSize(getTextColumnWidth(),getTextAreaHeight(),twoColumnView(),page == myPreviousPage);
  if (page.PaintState == PaintStateEnum.NOTHING_TO_PAINT || page.PaintState == PaintStateEnum.READY) {
    return;
  }
  final int oldState=page.PaintState;
  final HashMap<ZLTextLineInfo,ZLTextLineInfo> cache=myLineInfoCache;
  for (  ZLTextLineInfo info : page.LineInfos) {
    cache.put(info,info);
  }
switch (page.PaintState) {
default :
    break;
case PaintStateEnum.TO_SCROLL_FORWARD:
  if (!page.EndCursor.isEndOfText()) {
    final ZLTextWordCursor startCursor=new ZLTextWordCursor();
switch (myScrollingMode) {
case ScrollingMode.NO_OVERLAPPING:
      break;
case ScrollingMode.KEEP_LINES:
    page.findLineFromEnd(startCursor,myOverlappingValue);
  break;
case ScrollingMode.SCROLL_LINES:
page.findLineFromStart(startCursor,myOverlappingValue);
if (startCursor.isEndOfParagraph()) {
startCursor.nextParagraph();
}
break;
case ScrollingMode.SCROLL_PERCENTAGE:
page.findPercentFromStart(startCursor,myOverlappingValue);
break;
}
if (!startCursor.isNull() && startCursor.samePositionAs(page.StartCursor)) {
page.findLineFromStart(startCursor,1);
}
if (!startCursor.isNull()) {
final ZLTextWordCursor endCursor=new ZLTextWordCursor();
buildInfos(page,startCursor,endCursor);
if (!page.isEmptyPage() && (myScrollingMode != ScrollingMode.KEEP_LINES || !endCursor.samePositionAs(page.EndCursor))) {
page.StartCursor.setCursor(startCursor);
page.EndCursor.setCursor(endCursor);
break;
}
}
page.StartCursor.setCursor(page.EndCursor);
buildInfos(page,page.StartCursor,page.EndCursor);
}
break;
case PaintStateEnum.TO_SCROLL_BACKWARD:
if (!page.StartCursor.isStartOfText()) {
switch (myScrollingMode) {
case ScrollingMode.NO_OVERLAPPING:
page.StartCursor.setCursor(findStartOfPrevousPage(page,page.StartCursor));
break;
case ScrollingMode.KEEP_LINES:
{
ZLTextWordCursor endCursor=new ZLTextWordCursor();
page.findLineFromStart(endCursor,myOverlappingValue);
if (!endCursor.isNull() && endCursor.samePositionAs(page.EndCursor)) {
page.findLineFromEnd(endCursor,1);
}
if (!endCursor.isNull()) {
ZLTextWordCursor startCursor=findStartOfPrevousPage(page,endCursor);
if (startCursor.samePositionAs(page.StartCursor)) {
page.StartCursor.setCursor(findStartOfPrevousPage(page,page.StartCursor));
}
 else {
page.StartCursor.setCursor(startCursor);
}
}
 else {
page.StartCursor.setCursor(findStartOfPrevousPage(page,page.StartCursor));
}
break;
}
case ScrollingMode.SCROLL_LINES:
page.StartCursor.setCursor(findStart(page,page.StartCursor,SizeUnit.LINE_UNIT,myOverlappingValue));
break;
case ScrollingMode.SCROLL_PERCENTAGE:
page.StartCursor.setCursor(findStart(page,page.StartCursor,SizeUnit.PIXEL_UNIT,page.getTextHeight() * myOverlappingValue / 100));
break;
}
buildInfos(page,page.StartCursor,page.EndCursor);
if (page.isEmptyPage()) {
page.StartCursor.setCursor(findStart(page,page.StartCursor,SizeUnit.LINE_UNIT,1));
buildInfos(page,page.StartCursor,page.EndCursor);
}
}
break;
case PaintStateEnum.START_IS_KNOWN:
if (!page.StartCursor.isNull()) {
buildInfos(page,page.StartCursor,page.EndCursor);
}
break;
case PaintStateEnum.END_IS_KNOWN:
if (!page.EndCursor.isNull()) {
page.StartCursor.setCursor(findStartOfPrevousPage(page,page.EndCursor));
buildInfos(page,page.StartCursor,page.EndCursor);
}
break;
}
page.PaintState=PaintStateEnum.READY;
myLineInfoCache.clear();
if (page == myCurrentPage) {
if (oldState != PaintStateEnum.START_IS_KNOWN) {
myPreviousPage.reset();
}
if (oldState != PaintStateEnum.END_IS_KNOWN) {
myNextPage.reset();
}
}
}
