{
  setContext(context);
  final ZLFile wallpaper=getWallpaperFile();
  if (wallpaper != null) {
    context.clear(wallpaper,getFillMode());
  }
 else {
    context.clear(getBackgroundColor());
  }
  if (myModel == null || myModel.getParagraphsNumber() == 0) {
    return;
  }
  ZLTextPage page;
switch (pageIndex) {
default :
case current:
    page=myCurrentPage;
  break;
case previous:
page=myPreviousPage;
if (myPreviousPage.PaintState == PaintStateEnum.NOTHING_TO_PAINT) {
preparePaintInfo(myCurrentPage);
myPreviousPage.EndCursor.setCursor(myCurrentPage.StartCursor);
myPreviousPage.PaintState=PaintStateEnum.END_IS_KNOWN;
}
break;
case next:
page=myNextPage;
if (myNextPage.PaintState == PaintStateEnum.NOTHING_TO_PAINT) {
preparePaintInfo(myCurrentPage);
myNextPage.StartCursor.setCursor(myCurrentPage.EndCursor);
myNextPage.PaintState=PaintStateEnum.START_IS_KNOWN;
}
}
page.TextElementMap.clear();
preparePaintInfo(page);
if (page.StartCursor.isNull() || page.EndCursor.isNull()) {
return;
}
final ArrayList<ZLTextLineInfo> lineInfos=page.LineInfos;
final int[] labels=new int[lineInfos.size() + 1];
int x=getLeftMargin();
int y=getTopMargin();
int index=0;
ZLTextLineInfo previousInfo=null;
for (ZLTextLineInfo info : lineInfos) {
info.adjust(previousInfo);
prepareTextLine(page,info,x,y);
y+=info.Height + info.Descent + info.VSpaceAfter;
labels[++index]=page.TextElementMap.size();
if (index == page.Column0Height) {
y=getTopMargin();
x+=page.getTextWidth() + getSpaceBetweenColumns();
}
previousInfo=info;
}
final List<ZLTextHighlighting> hilites=findHilites(page);
if (!hilites.isEmpty()) {
x=getLeftMargin();
y=getTopMargin();
index=0;
for (ZLTextLineInfo info : lineInfos) {
drawHighlightings(page,hilites,info,labels[index],labels[index + 1],x,y);
y+=info.Height + info.Descent + info.VSpaceAfter;
++index;
if (index == page.Column0Height) {
y=getTopMargin();
x+=page.getTextWidth() + getSpaceBetweenColumns();
}
}
}
x=getLeftMargin();
y=getTopMargin();
index=0;
for (ZLTextLineInfo info : lineInfos) {
drawTextLine(page,hilites,info,labels[index],labels[index + 1]);
y+=info.Height + info.Descent + info.VSpaceAfter;
++index;
if (index == page.Column0Height) {
y=getTopMargin();
x+=page.getTextWidth() + getSpaceBetweenColumns();
}
}
final ZLTextRegion outlinedElementRegion=getOutlinedRegion(page);
if (outlinedElementRegion != null && myShowOutline) {
outlinedElementRegion.draw(context);
}
drawSelectionCursor(context,getSelectionCursorPoint(page,ZLTextSelectionCursor.Left));
drawSelectionCursor(context,getSelectionCursorPoint(page,ZLTextSelectionCursor.Right));
}
