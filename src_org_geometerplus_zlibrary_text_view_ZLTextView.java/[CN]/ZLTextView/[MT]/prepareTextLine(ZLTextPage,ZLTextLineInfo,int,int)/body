{
  y=Math.min(y + info.Height,getTopMargin() + page.getTextHeight() - 1);
  final ZLPaintContext context=getContext();
  final ZLTextParagraphCursor paragraphCursor=info.ParagraphCursor;
  setTextStyle(info.StartStyle);
  int spaceCounter=info.SpaceCounter;
  int fullCorrection=0;
  final boolean endOfParagraph=info.isEndOfParagraph();
  boolean wordOccurred=false;
  boolean changeStyle=true;
  x+=info.LeftIndent;
  final int maxWidth=page.getTextWidth();
switch (getTextStyle().getAlignment()) {
case ZLTextAlignmentType.ALIGN_RIGHT:
    x+=maxWidth - getTextStyle().getRightIndent() - info.Width;
  break;
case ZLTextAlignmentType.ALIGN_CENTER:
x+=(maxWidth - getTextStyle().getRightIndent() - info.Width) / 2;
break;
case ZLTextAlignmentType.ALIGN_JUSTIFY:
if (!endOfParagraph && (paragraphCursor.getElement(info.EndElementIndex) != ZLTextElement.AfterParagraph)) {
fullCorrection=maxWidth - getTextStyle().getRightIndent() - info.Width;
}
break;
case ZLTextAlignmentType.ALIGN_LEFT:
case ZLTextAlignmentType.ALIGN_UNDEFINED:
break;
}
final ZLTextParagraphCursor paragraph=info.ParagraphCursor;
final int paragraphIndex=paragraph.Index;
final int endElementIndex=info.EndElementIndex;
int charIndex=info.RealStartCharIndex;
ZLTextElementArea spaceElement=null;
for (int wordIndex=info.RealStartElementIndex; wordIndex != endElementIndex; ++wordIndex, charIndex=0) {
final ZLTextElement element=paragraph.getElement(wordIndex);
final int width=getElementWidth(element,charIndex);
if (element == ZLTextElement.HSpace) {
if (wordOccurred && (spaceCounter > 0)) {
final int correction=fullCorrection / spaceCounter;
final int spaceLength=context.getSpaceWidth() + correction;
if (getTextStyle().isUnderline()) {
spaceElement=new ZLTextElementArea(paragraphIndex,wordIndex,0,0,true,false,false,getTextStyle(),element,x,x + spaceLength,y,y);
}
 else {
spaceElement=null;
}
x+=spaceLength;
fullCorrection-=correction;
wordOccurred=false;
--spaceCounter;
}
}
 else if (element instanceof ZLTextWord || element instanceof ZLTextImageElement) {
final int height=getElementHeight(element);
final int descent=getElementDescent(element);
final int length=element instanceof ZLTextWord ? ((ZLTextWord)element).Length : 0;
if (spaceElement != null) {
page.TextElementMap.add(spaceElement);
spaceElement=null;
}
page.TextElementMap.add(new ZLTextElementArea(paragraphIndex,wordIndex,charIndex,length - charIndex,true,false,changeStyle,getTextStyle(),element,x,x + width - 1,y - height + 1,y + descent));
changeStyle=false;
wordOccurred=true;
}
 else if (isStyleChangeElement(element)) {
applyStyleChangeElement(element);
changeStyle=true;
}
x+=width;
}
if (!endOfParagraph) {
final int len=info.EndCharIndex;
if (len > 0) {
final int wordIndex=info.EndElementIndex;
final ZLTextWord word=(ZLTextWord)paragraph.getElement(wordIndex);
final boolean addHyphenationSign=word.Data[word.Offset + len - 1] != '-';
final int width=getWordWidth(word,0,len,addHyphenationSign);
final int height=getElementHeight(word);
final int descent=context.getDescent();
page.TextElementMap.add(new ZLTextElementArea(paragraphIndex,wordIndex,0,len,false,addHyphenationSign,changeStyle,getTextStyle(),word,x,x + width - 1,y - height + 1,y + descent));
}
}
}
