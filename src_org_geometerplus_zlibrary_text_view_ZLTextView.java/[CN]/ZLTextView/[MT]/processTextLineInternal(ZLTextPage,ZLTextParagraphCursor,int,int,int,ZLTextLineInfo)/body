{
  final ZLPaintContext context=getContext();
  final ZLTextLineInfo info=new ZLTextLineInfo(paragraphCursor,startIndex,startCharIndex,getTextStyle());
  final ZLTextLineInfo cachedInfo=myLineInfoCache.get(info);
  if (cachedInfo != null) {
    cachedInfo.adjust(previousInfo);
    applyStyleChanges(paragraphCursor,startIndex,cachedInfo.EndElementIndex);
    return cachedInfo;
  }
  int currentElementIndex=startIndex;
  int currentCharIndex=startCharIndex;
  final boolean isFirstLine=startIndex == 0 && startCharIndex == 0;
  if (isFirstLine) {
    ZLTextElement element=paragraphCursor.getElement(currentElementIndex);
    while (isStyleChangeElement(element)) {
      applyStyleChangeElement(element);
      ++currentElementIndex;
      currentCharIndex=0;
      if (currentElementIndex == endIndex) {
        break;
      }
      element=paragraphCursor.getElement(currentElementIndex);
    }
    info.StartStyle=getTextStyle();
    info.RealStartElementIndex=currentElementIndex;
    info.RealStartCharIndex=currentCharIndex;
  }
  ZLTextStyle storedStyle=getTextStyle();
  final int maxWidth=page.getTextWidth() - storedStyle.getRightIndent(metrics());
  info.LeftIndent=storedStyle.getLeftIndent(metrics());
  if (isFirstLine) {
    info.LeftIndent+=storedStyle.getFirstLineIndent(metrics());
  }
  if (info.LeftIndent > maxWidth - 20) {
    info.LeftIndent=maxWidth * 3 / 4;
  }
  info.Width=info.LeftIndent;
  if (info.RealStartElementIndex == endIndex) {
    info.EndElementIndex=info.RealStartElementIndex;
    info.EndCharIndex=info.RealStartCharIndex;
    return info;
  }
  int newWidth=info.Width;
  int newHeight=info.Height;
  int newDescent=info.Descent;
  boolean wordOccurred=false;
  boolean isVisible=false;
  int lastSpaceWidth=0;
  int internalSpaceCounter=0;
  boolean removeLastSpace=false;
  do {
    ZLTextElement element=paragraphCursor.getElement(currentElementIndex);
    newWidth+=getElementWidth(element,currentCharIndex);
    newHeight=Math.max(newHeight,getElementHeight(element));
    newDescent=Math.max(newDescent,getElementDescent(element));
    if (element == ZLTextElement.HSpace) {
      if (wordOccurred) {
        wordOccurred=false;
        internalSpaceCounter++;
        lastSpaceWidth=context.getSpaceWidth();
        newWidth+=lastSpaceWidth;
      }
    }
 else     if (element == ZLTextElement.NBSpace) {
      wordOccurred=true;
    }
 else     if (element instanceof ZLTextWord) {
      wordOccurred=true;
      isVisible=true;
    }
 else     if (element instanceof ZLTextImageElement) {
      wordOccurred=true;
      isVisible=true;
    }
 else     if (element instanceof ZLTextVideoElement) {
      wordOccurred=true;
      isVisible=true;
    }
 else     if (element instanceof ExtensionElement) {
      wordOccurred=true;
      isVisible=true;
    }
 else     if (isStyleChangeElement(element)) {
      applyStyleChangeElement(element);
    }
    if (newWidth > maxWidth) {
      if (info.EndElementIndex != startIndex || element instanceof ZLTextWord) {
        break;
      }
    }
    ZLTextElement previousElement=element;
    ++currentElementIndex;
    currentCharIndex=0;
    boolean allowBreak=currentElementIndex == endIndex;
    if (!allowBreak) {
      element=paragraphCursor.getElement(currentElementIndex);
      allowBreak=previousElement != ZLTextElement.NBSpace && element != ZLTextElement.NBSpace && (!(element instanceof ZLTextWord) || previousElement instanceof ZLTextWord) && !(element instanceof ZLTextImageElement) && !(element instanceof ZLTextControlElement);
    }
    if (allowBreak) {
      info.IsVisible=isVisible;
      info.Width=newWidth;
      if (info.Height < newHeight) {
        info.Height=newHeight;
      }
      if (info.Descent < newDescent) {
        info.Descent=newDescent;
      }
      info.EndElementIndex=currentElementIndex;
      info.EndCharIndex=currentCharIndex;
      info.SpaceCounter=internalSpaceCounter;
      storedStyle=getTextStyle();
      removeLastSpace=!wordOccurred && (internalSpaceCounter > 0);
    }
  }
 while (currentElementIndex != endIndex);
  if (currentElementIndex != endIndex && (isHyphenationPossible() || info.EndElementIndex == startIndex)) {
    ZLTextElement element=paragraphCursor.getElement(currentElementIndex);
    if (element instanceof ZLTextWord) {
      final ZLTextWord word=(ZLTextWord)element;
      newWidth-=getWordWidth(word,currentCharIndex);
      int spaceLeft=maxWidth - newWidth;
      if ((word.Length > 3 && spaceLeft > 2 * context.getSpaceWidth()) || info.EndElementIndex == startIndex) {
        ZLTextHyphenationInfo hyphenationInfo=getHyphenationInfo(word);
        int hyphenationPosition=currentCharIndex;
        int subwordWidth=0;
        for (int right=word.Length - 1, left=currentCharIndex; right > left; ) {
          final int mid=(right + left + 1) / 2;
          int m1=mid;
          while (m1 > left && !hyphenationInfo.isHyphenationPossible(m1)) {
            --m1;
          }
          if (m1 > left) {
            final int w=getWordWidth(word,currentCharIndex,m1 - currentCharIndex,word.Data[word.Offset + m1 - 1] != '-');
            if (w < spaceLeft) {
              left=mid;
              hyphenationPosition=m1;
              subwordWidth=w;
            }
 else {
              right=mid - 1;
            }
          }
 else {
            left=mid;
          }
        }
        if (hyphenationPosition == currentCharIndex && info.EndElementIndex == startIndex) {
          subwordWidth=getWordWidth(word,currentCharIndex,1,false);
          int right=word.Length == currentCharIndex + 1 ? word.Length : word.Length - 1;
          int left=currentCharIndex + 1;
          while (right > left) {
            final int mid=(right + left + 1) / 2;
            final int w=getWordWidth(word,currentCharIndex,mid - currentCharIndex,word.Data[word.Offset + mid - 1] != '-');
            if (w <= spaceLeft) {
              left=mid;
              subwordWidth=w;
            }
 else {
              right=mid - 1;
            }
          }
          hyphenationPosition=right;
        }
        if (hyphenationPosition > currentCharIndex) {
          info.IsVisible=true;
          info.Width=newWidth + subwordWidth;
          if (info.Height < newHeight) {
            info.Height=newHeight;
          }
          if (info.Descent < newDescent) {
            info.Descent=newDescent;
          }
          info.EndElementIndex=currentElementIndex;
          info.EndCharIndex=hyphenationPosition;
          info.SpaceCounter=internalSpaceCounter;
          storedStyle=getTextStyle();
          removeLastSpace=false;
        }
      }
    }
  }
  if (removeLastSpace) {
    info.Width-=lastSpaceWidth;
    info.SpaceCounter--;
  }
  setTextStyle(storedStyle);
  if (isFirstLine) {
    info.VSpaceBefore=info.StartStyle.getSpaceBefore(metrics());
    if (previousInfo != null) {
      info.PreviousInfoUsed=true;
      info.Height+=Math.max(0,info.VSpaceBefore - previousInfo.VSpaceAfter);
    }
 else {
      info.PreviousInfoUsed=false;
      info.Height+=info.VSpaceBefore;
    }
  }
  if (info.isEndOfParagraph()) {
    info.VSpaceAfter=getTextStyle().getSpaceAfter(metrics());
  }
  if (info.EndElementIndex != endIndex || endIndex == info.ParagraphCursorLength) {
    myLineInfoCache.put(info,info);
  }
  return info;
}
