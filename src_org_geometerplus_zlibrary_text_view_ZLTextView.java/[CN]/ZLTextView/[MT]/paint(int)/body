{
  Context.clear(getBackgroundColor());
  if ((myModel == null) || (myModel.getParagraphsNumber() == 0)) {
    return;
  }
  ZLTextPage page;
switch (viewPage) {
default :
case PAGE_CENTRAL:
    page=myCurrentPage;
  break;
case PAGE_TOP:
case PAGE_LEFT:
page=myPreviousPage;
if (myPreviousPage.PaintState == PaintStateEnum.NOTHING_TO_PAINT) {
preparePaintInfo(myCurrentPage);
myPreviousPage.EndCursor.setCursor(myCurrentPage.StartCursor);
myPreviousPage.PaintState=PaintStateEnum.END_IS_KNOWN;
}
break;
case PAGE_BOTTOM:
case PAGE_RIGHT:
page=myNextPage;
if (myNextPage.PaintState == PaintStateEnum.NOTHING_TO_PAINT) {
preparePaintInfo(myCurrentPage);
myNextPage.StartCursor.setCursor(myCurrentPage.EndCursor);
myNextPage.PaintState=PaintStateEnum.START_IS_KNOWN;
}
}
page.TextElementMap.clear();
preparePaintInfo(page);
if (page.StartCursor.isNull() || page.EndCursor.isNull()) {
return;
}
final ArrayList<ZLTextLineInfo> lineInfos=page.LineInfos;
final int[] labels=new int[lineInfos.size() + 1];
int y=getTopMargin();
int index=0;
for (ZLTextLineInfo info : lineInfos) {
prepareTextLine(page,info,y);
y+=info.Height + info.Descent + info.VSpaceAfter;
labels[++index]=page.TextElementMap.size();
}
if (page == myCurrentPage) {
mySelectionModel.update();
}
y=getTopMargin();
index=0;
for (ZLTextLineInfo info : lineInfos) {
drawTextLine(page,info,labels[index],labels[index + 1],y);
y+=info.Height + info.Descent + info.VSpaceAfter;
++index;
}
final ZLTextHyperlinkArea hyperlinkArea=getCurrentHyperlinkArea(page);
if (hyperlinkArea != null) {
Context.setColor(new ZLColor(255,0,0));
for (ZLTextElementArea area : hyperlinkArea.textAreas()) {
Context.drawLine(area.XStart,area.YStart,area.XEnd,area.YStart);
Context.drawLine(area.XEnd,area.YStart,area.XEnd,area.YEnd);
Context.drawLine(area.XEnd,area.YEnd,area.XStart,area.YEnd);
Context.drawLine(area.XStart,area.YEnd,area.XStart,area.YStart);
}
}
}
