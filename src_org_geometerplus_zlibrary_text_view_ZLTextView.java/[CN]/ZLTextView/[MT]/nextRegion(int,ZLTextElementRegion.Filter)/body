{
  final ArrayList<ZLTextElementRegion> elementRegions=myCurrentPage.TextElementMap.ElementRegions;
  if (elementRegions.isEmpty()) {
    return null;
  }
  int index=elementRegions.indexOf(mySelectedRegion);
  mySelectedRegion=index >= 0 ? elementRegions.get(index) : null;
switch (direction) {
case Direction.LEFT:
case Direction.UP:
    if (index == -1) {
      index=elementRegions.size() - 1;
    }
 else     if (index == 0) {
      return null;
    }
 else {
      --index;
    }
  break;
case Direction.RIGHT:
case Direction.DOWN:
if (index == elementRegions.size() - 1) {
  return null;
}
 else {
  ++index;
}
break;
}
switch (direction) {
case Direction.LEFT:
for (; index >= 0; --index) {
final ZLTextElementRegion candidate=elementRegions.get(index);
if (filter.accepts(candidate) && candidate.isAtLeftOf(mySelectedRegion)) {
return candidate;
}
}
break;
case Direction.RIGHT:
for (; index < elementRegions.size(); ++index) {
final ZLTextElementRegion candidate=elementRegions.get(index);
if (filter.accepts(candidate) && candidate.isAtRightOf(mySelectedRegion)) {
return candidate;
}
}
break;
case Direction.DOWN:
{
ZLTextElementRegion firstCandidate=null;
for (; index < elementRegions.size(); ++index) {
final ZLTextElementRegion candidate=elementRegions.get(index);
if (!filter.accepts(candidate)) {
continue;
}
if (candidate.isExactlyUnder(mySelectedRegion)) {
return candidate;
}
if (firstCandidate == null && candidate.isUnder(mySelectedRegion)) {
firstCandidate=candidate;
}
}
if (firstCandidate != null) {
return firstCandidate;
}
break;
}
case Direction.UP:
ZLTextElementRegion firstCandidate=null;
for (; index >= 0; --index) {
final ZLTextElementRegion candidate=elementRegions.get(index);
if (!filter.accepts(candidate)) {
continue;
}
if (candidate.isExactlyOver(mySelectedRegion)) {
return candidate;
}
if (firstCandidate == null && candidate.isOver(mySelectedRegion)) {
firstCandidate=candidate;
}
}
if (firstCandidate != null) {
return firstCandidate;
}
break;
}
return null;
}
