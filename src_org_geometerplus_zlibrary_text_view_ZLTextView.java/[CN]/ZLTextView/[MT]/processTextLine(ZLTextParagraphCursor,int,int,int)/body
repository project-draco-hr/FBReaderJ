{
  final ZLPaintContext context=myContext;
  final ZLTextLineInfo info=new ZLTextLineInfo(paragraphCursor,startIndex,startCharIndex,getTextStyle());
  final ZLTextLineInfo cachedInfo=myLineInfoCache.get(info);
  if (cachedInfo != null) {
    applyStyleChanges(paragraphCursor,startIndex,cachedInfo.EndElementIndex);
    return cachedInfo;
  }
  int currentElementIndex=startIndex;
  int currentCharIndex=startCharIndex;
  final boolean isFirstLine=startIndex == 0 && startCharIndex == 0;
  if (isFirstLine) {
    ZLTextElement element=paragraphCursor.getElement(currentElementIndex);
    while (isStyleChangeElement(element)) {
      applyStyleChangeElement(element);
      ++currentElementIndex;
      currentCharIndex=0;
      if (currentElementIndex == endIndex) {
        break;
      }
      element=paragraphCursor.getElement(currentElementIndex);
    }
    info.StartStyle=getTextStyle();
    info.RealStartElementIndex=currentElementIndex;
    info.RealStartCharIndex=currentCharIndex;
  }
  ZLTextStyle storedStyle=getTextStyle();
  info.LeftIndent=getTextStyle().getLeftIndent();
  if (isFirstLine) {
    info.LeftIndent+=getTextStyle().getFirstLineIndentDelta();
  }
  info.Width=info.LeftIndent;
  if (info.RealStartElementIndex == endIndex) {
    info.EndElementIndex=info.RealStartElementIndex;
    info.EndCharIndex=info.RealStartCharIndex;
    return info;
  }
  int newWidth=info.Width;
  int newHeight=info.Height;
  int newDescent=info.Descent;
  int maxWidth=getTextAreaWidth() - getTextStyle().getRightIndent();
  boolean wordOccurred=false;
  boolean isVisible=false;
  int lastSpaceWidth=0;
  int internalSpaceCounter=0;
  boolean removeLastSpace=false;
  do {
    ZLTextElement element=paragraphCursor.getElement(currentElementIndex);
    newWidth+=getElementWidth(element,currentCharIndex);
    newHeight=Math.max(newHeight,getElementHeight(element));
    newDescent=Math.max(newDescent,getElementDescent(element));
    if (element == ZLTextElement.HSpace) {
      if (wordOccurred) {
        wordOccurred=false;
        internalSpaceCounter++;
        lastSpaceWidth=context.getSpaceWidth();
        newWidth+=lastSpaceWidth;
      }
    }
 else     if (element instanceof ZLTextWord) {
      wordOccurred=true;
      isVisible=true;
    }
 else     if (element instanceof ZLTextImageElement) {
      wordOccurred=true;
      isVisible=true;
    }
 else     if (isStyleChangeElement(element)) {
      applyStyleChangeElement(element);
    }
    if (newWidth > maxWidth) {
      if (info.EndElementIndex != startIndex || element instanceof ZLTextWord) {
        break;
      }
    }
    ZLTextElement previousElement=element;
    ++currentElementIndex;
    currentCharIndex=0;
    boolean allowBreak=currentElementIndex == endIndex;
    if (!allowBreak) {
      element=paragraphCursor.getElement(currentElementIndex);
      allowBreak=((!(element instanceof ZLTextWord) || previousElement instanceof ZLTextWord) && !(element instanceof ZLTextImageElement) && !(element instanceof ZLTextControlElement));
    }
    if (allowBreak) {
      info.IsVisible=isVisible;
      info.Width=newWidth;
      if (info.Height < newHeight) {
        info.Height=newHeight;
      }
      if (info.Descent < newDescent) {
        info.Descent=newDescent;
      }
      info.EndElementIndex=currentElementIndex;
      info.EndCharIndex=currentCharIndex;
      info.SpaceCounter=internalSpaceCounter;
      storedStyle=getTextStyle();
      removeLastSpace=!wordOccurred && (internalSpaceCounter > 0);
    }
  }
 while (currentElementIndex != endIndex);
  if (currentElementIndex != endIndex && (isHyphenationPossible() || info.EndElementIndex == startIndex)) {
    ZLTextElement element=paragraphCursor.getElement(currentElementIndex);
    if (element instanceof ZLTextWord) {
      final ZLTextWord word=(ZLTextWord)element;
      newWidth-=getWordWidth(word,currentCharIndex);
      int spaceLeft=maxWidth - newWidth;
      if ((word.Length > 3 && spaceLeft > 2 * context.getSpaceWidth()) || info.EndElementIndex == startIndex) {
        ZLTextHyphenationInfo hyphenationInfo=ZLTextHyphenator.Instance().getInfo(word);
        int hyphenationPosition=word.Length - 1;
        int subwordWidth=0;
        for (; hyphenationPosition > currentCharIndex; hyphenationPosition--) {
          if (hyphenationInfo.isHyphenationPossible(hyphenationPosition)) {
            subwordWidth=getWordWidth(word,currentCharIndex,hyphenationPosition - currentCharIndex,word.Data[word.Offset + hyphenationPosition - 1] != '-');
            if (subwordWidth <= spaceLeft) {
              break;
            }
          }
        }
        if (hyphenationPosition == currentCharIndex && info.EndElementIndex == startIndex) {
          hyphenationPosition=word.Length == currentCharIndex + 1 ? word.Length : word.Length - 1;
          subwordWidth=getWordWidth(word,currentCharIndex,word.Length - currentCharIndex,false);
          for (; hyphenationPosition > currentCharIndex + 1; hyphenationPosition--) {
            subwordWidth=getWordWidth(word,currentCharIndex,hyphenationPosition - currentCharIndex,word.Data[word.Offset + hyphenationPosition - 1] != '-');
            if (subwordWidth <= spaceLeft) {
              break;
            }
          }
        }
        if (hyphenationPosition > currentCharIndex) {
          info.IsVisible=true;
          info.Width=newWidth + subwordWidth;
          if (info.Height < newHeight) {
            info.Height=newHeight;
          }
          if (info.Descent < newDescent) {
            info.Descent=newDescent;
          }
          info.EndElementIndex=currentElementIndex;
          info.EndCharIndex=hyphenationPosition;
          info.SpaceCounter=internalSpaceCounter;
          storedStyle=getTextStyle();
          removeLastSpace=false;
        }
      }
    }
  }
  if (removeLastSpace) {
    info.Width-=lastSpaceWidth;
    info.SpaceCounter--;
  }
  setTextStyle(storedStyle);
  if (isFirstLine) {
    info.Height+=info.StartStyle.getSpaceBefore();
  }
  if (info.isEndOfParagraph()) {
    info.VSpaceAfter=getTextStyle().getSpaceAfter();
  }
  if (info.EndElementIndex != endIndex || endIndex == info.ParagraphCursorLength) {
    myLineInfoCache.put(info,info);
  }
  return info;
}
