{
synchronized (myAreas) {
    if (myElementRegions.isEmpty()) {
      return null;
    }
    int index=currentRegion != null ? myElementRegions.indexOf(currentRegion) : -1;
switch (direction) {
case rightToLeft:
case up:
      if (index == -1) {
        index=myElementRegions.size() - 1;
      }
 else       if (index == 0) {
        return null;
      }
 else {
        --index;
      }
    break;
case leftToRight:
case down:
  if (index == myElementRegions.size() - 1) {
    return null;
  }
 else {
    ++index;
  }
break;
}
switch (direction) {
case rightToLeft:
for (; index >= 0; --index) {
final ZLTextRegion candidate=myElementRegions.get(index);
if (filter.accepts(candidate) && candidate.isAtLeftOf(currentRegion)) {
  return candidate;
}
}
break;
case leftToRight:
for (; index < myElementRegions.size(); ++index) {
final ZLTextRegion candidate=myElementRegions.get(index);
if (filter.accepts(candidate) && candidate.isAtRightOf(currentRegion)) {
return candidate;
}
}
break;
case down:
{
ZLTextRegion firstCandidate=null;
for (; index < myElementRegions.size(); ++index) {
final ZLTextRegion candidate=myElementRegions.get(index);
if (!filter.accepts(candidate)) {
continue;
}
if (candidate.isExactlyUnder(currentRegion)) {
return candidate;
}
if (firstCandidate == null && candidate.isUnder(currentRegion)) {
firstCandidate=candidate;
}
}
if (firstCandidate != null) {
return firstCandidate;
}
break;
}
case up:
ZLTextRegion firstCandidate=null;
for (; index >= 0; --index) {
final ZLTextRegion candidate=myElementRegions.get(index);
if (!filter.accepts(candidate)) {
continue;
}
if (candidate.isExactlyOver(currentRegion)) {
return candidate;
}
if (firstCandidate == null && candidate.isOver(currentRegion)) {
firstCandidate=candidate;
}
}
if (firstCandidate != null) {
return firstCandidate;
}
break;
}
}
return null;
}
