{
  final NetworkCatalogTree catalogTree=(NetworkCatalogTree)tree;
  if (consumeByVisibility(activity,catalogTree,actionCode)) {
    return true;
  }
  final NetworkCatalogItem item=catalogTree.Item;
switch (actionCode) {
case OPEN_CATALOG_ITEM_ID:
{
      if (item instanceof BasketItem && item.Link.basket().bookIds().size() == 0) {
        UIUtil.showErrorMessage(activity,"emptyBasket");
      }
 else {
        doExpandCatalog(activity,catalogTree);
      }
      return true;
    }
case OPEN_IN_BROWSER_ITEM_ID:
  if (item instanceof NetworkURLCatalogItem) {
    Util.openInBrowser(activity,item.getUrl(NetworkItem.UrlType.HtmlPage));
  }
return true;
case RELOAD_ITEM_ID:
doReloadCatalog(activity,catalogTree);
return true;
case SIGNIN_ITEM_ID:
AuthenticationDialog.show(activity,item.Link,null);
return true;
case SIGNUP_ITEM_ID:
Util.runRegistrationDialog(activity,item.Link);
return true;
case SIGNOUT_ITEM_ID:
doSignOut(activity,catalogTree);
return true;
case TOPUP_ITEM_ID:
new TopupActions().runStandalone(activity,item.Link);
return true;
case CUSTOM_CATALOG_EDIT:
{
final Intent intent=new Intent(activity,AddCustomCatalogActivity.class);
NetworkLibraryActivity.addLinkToIntent(intent,(ICustomNetworkLink)item.Link);
activity.startActivity(intent);
return true;
}
case CUSTOM_CATALOG_REMOVE:
removeCustomLink((ICustomNetworkLink)item.Link);
return true;
case BASKET_CLEAR:
item.Link.basket().clear();
return true;
case BASKET_BUY_ALL_BOOKS:
return true;
}
return false;
}
